=== PROYECTO MVT PERSONALIZADO: admin_kiosk ===
Fecha de creación del archivo: 2025-01-13 16:45:07

Carpeta raíz analizada: D:\Programas_D\admin_kiosk

Incluimos SOLO el contenido de archivos con extensiones:
  ('.py', '.html', '.css', '.js', '.jsc', '.json', '.md')

Excluimos carpetas de sistema:
  {'env', '.svn', '__pycache__', '.hg', 'venv', '.git'}
Excluimos archivos con extensiones:
  {'.pyd', '.exe', '.dll', '.pyc', '.so'}

Estructura y contenido de archivos relevantes:
----------------------------------------------

Archivo: .env
Archivo: .flaskenv
Archivo: .gitignore
Carpeta: app
    Archivo: __init__.py
    --- CONTENIDO de __init__.py ---
from flask import Flask
import os
from app.extensions import init_extensions, db
from app.utils.logger import setup_logger
from app.blueprints import init_blueprints

def create_app(config_name=None):
    """Crea y configura la aplicación Flask"""
    app = Flask(__name__)
    
    # Configuración por defecto
    app.config.update(
        SECRET_KEY=os.environ.get('SECRET_KEY', 'dev-key-12345'),
        SQLALCHEMY_DATABASE_URI='postgresql://postgres:postgres@localhost/admin_kiosk',
        SQLALCHEMY_TRACK_MODIFICATIONS=False,
        CACHE_TYPE='simple',
        CACHE_DEFAULT_TIMEOUT=300,
        JSON_SORT_KEYS=False,
        MAX_CONTENT_LENGTH=16 * 1024 * 1024,  # 16MB max-limit
        UPLOAD_FOLDER=os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static', 'uploads'),
        LOG_DIR=os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'logs')
    )
    
    # Asegurar que existan los directorios necesarios
    os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
    os.makedirs(app.config['LOG_DIR'], exist_ok=True)
    
    # Configurar logger
    setup_logger(app)
    app.logger.info('Iniciando aplicación Admin Kiosk')
    
    # Inicializar extensiones
    init_extensions(app)
    app.logger.info('Extensiones inicializadas')
    
    # Registrar blueprints
    init_blueprints(app)
    app.logger.info('Blueprints registrados')
    
    # Agregar filtros para las plantillas
    @app.template_filter('datetime')
    def format_datetime(value):
        if value is None:
            return 'Nunca'
        return value.strftime('%d/%m/%Y %H:%M:%S')
    
    # Importar modelos y crear tablas
    with app.app_context():
        app.logger.info('Inicializando modelos y tablas')
        # Importar todos los modelos para que SQLAlchemy los reconozca
        from app.models.kiosk import Kiosk
        from app.models.location import Location
        from app.models.state import State
        from app.models.action import Action
        from app.models.kiosk_log import KioskLog
        from app.models.settings import Settings
        from app.models.kiosk_location import KioskLocation
        
        # Crear todas las tablas
        db.create_all()
        app.logger.info('Tablas creadas')
        
        # Inicializar configuraciones por defecto
        Settings.initialize_defaults()
        app.logger.info('Configuraciones inicializadas')
    
    return app 

def register_blueprints(app):
    """Registrar blueprints"""
    from app.blueprints.main import bp as main_bp
    from app.blueprints.kiosk import bp as kiosk_bp
    from app.blueprints.location import bp as location_bp
    
    app.register_blueprint(main_bp)
    app.register_blueprint(kiosk_bp, url_prefix='/kiosk')
    app.register_blueprint(location_bp, url_prefix='/location') 
    Carpeta: blueprints
        Archivo: __init__.py
        --- CONTENIDO de __init__.py ---
# Este archivo hace que el directorio blueprints sea un paquete Python
from app.blueprints.main import bp as main_bp
from app.blueprints.kiosk import bp as kiosks_bp
from app.blueprints.location import bp as location_bp

def init_blueprints(app):
    """Inicializa todos los blueprints de la aplicación"""
    # Blueprint principal - sin prefijo
    app.register_blueprint(main_bp)
    
    # Blueprint de kiosks - prefijo /kiosk
    app.register_blueprint(kiosks_bp, url_prefix='/kiosk')
    
    # Blueprint de locations - prefijo /location
    app.register_blueprint(location_bp, url_prefix='/location')
    
    # Registrar rutas de error personalizadas
    register_error_handlers(app)

def register_error_handlers(app):
    """Registra los manejadores de error personalizados"""
    @app.errorhandler(404)
    def not_found_error(error):
        return {'error': 'Recurso no encontrado'}, 404
    
    @app.errorhandler(500)
    def internal_error(error):
        app.logger.error(f'Error del servidor: {error}')
        return {'error': 'Error interno del servidor'}, 500
    
    @app.errorhandler(403)
    def forbidden_error(error):
        return {'error': 'Acceso denegado'}, 403 
        Carpeta: kiosk
            Archivo: __init__.py
            --- CONTENIDO de __init__.py ---
from flask import Blueprint

bp = Blueprint('kiosks', __name__, 
               url_prefix='/kiosks',
               template_folder='../../templates')

from app.blueprints.kiosk import routes  # Importar rutas al final para evitar imports circulares 
            Archivo: routes.py
            --- CONTENIDO de routes.py ---
from flask import render_template, jsonify, request, current_app
from app.blueprints.kiosk import bp
from app.models.kiosk import Kiosk
from app.models.state import State
from app.models.location import Location
from app.models.kiosk_location import KioskLocation
from app.models.kiosk_log import KioskLog
from app.models.settings import Settings
from app.extensions import db
from datetime import datetime

@bp.route('/')
def index():
    """Vista principal de kiosks"""
    current_app.logger.info('Accediendo a la vista de kiosks')
    kiosks = Kiosk.query.all()
    states = State.query.all()
    locations = Location.query.all()
    return render_template('kiosk/index.html', 
                         kiosks=kiosks,
                         states=states,
                         locations=locations)

@bp.route('/<int:id>')
def detail(id):
    """Vista detallada de un kiosk"""
    current_app.logger.info(f'Accediendo a detalles del kiosk {id}')
    kiosk = Kiosk.query.get_or_404(id)
    logs = KioskLog.query.filter_by(kiosk_id=id).order_by(KioskLog.created_at.desc()).limit(50).all()
    locations = Location.query.all()
    history = KioskLocation.query.filter_by(kiosk_id=id).order_by(KioskLocation.start_date.desc()).all()
    
    return render_template('kiosk/detail.html',
                         kiosk=kiosk,
                         logs=logs,
                         locations=locations,
                         history=history)

@bp.route('/logs')
def logs():
    """Vista de logs de kiosks"""
    current_app.logger.info('Accediendo a la vista de logs')
    logs = KioskLog.query.order_by(KioskLog.created_at.desc()).limit(100).all()
    return render_template('kiosk/logs.html', logs=logs)

@bp.route('/settings')
def settings():
    """Vista de configuración de kiosks"""
    current_app.logger.info('Accediendo a la vista de configuración')
    settings = Settings.query.all()
    return render_template('kiosk/settings.html', settings=settings)

@bp.route('/api/list')
def api_list():
    """API para listar kiosks con filtros"""
    current_app.logger.info('Solicitando lista de kiosks vía API')
    
    # Obtener parámetros de filtrado
    status = request.args.get('status')
    location_id = request.args.get('location_id')
    state_id = request.args.get('state_id')
    
    # Construir query base
    query = Kiosk.query
    
    # Aplicar filtros
    if status:
        query = query.filter(Kiosk.status == status)
    if location_id:
        query = query.filter(Kiosk.location_id == location_id)
    if state_id:
        query = query.filter(Kiosk.state_id == state_id)
    
    # Ejecutar query
    kiosks = query.all()
    return jsonify([k.to_dict() for k in kiosks])

@bp.route('/api/update/<int:kiosk_id>', methods=['POST'])
def api_update(kiosk_id):
    """API para actualizar un kiosk"""
    current_app.logger.info(f'Actualizando kiosk {kiosk_id}')
    
    kiosk = Kiosk.query.get_or_404(kiosk_id)
    data = request.get_json()
    
    try:
        if 'location_id' in data:
            kiosk.location_id = data['location_id']
        if 'state_id' in data:
            kiosk.state_id = data['state_id']
            
        db.session.commit()
        current_app.logger.info(f'Kiosk {kiosk_id} actualizado exitosamente')
        return jsonify({'status': 'success'})
        
    except Exception as e:
        current_app.logger.error(f'Error actualizando kiosk {kiosk_id}: {str(e)}')
        db.session.rollback()
        return jsonify({'status': 'error', 'message': str(e)}), 500 
        Carpeta: location
            Archivo: __init__.py
            --- CONTENIDO de __init__.py ---
from flask import Blueprint

bp = Blueprint('location', __name__, 
               url_prefix='/location',
               template_folder='../../templates')

from app.blueprints.location import routes  # Importar rutas al final para evitar imports circulares 
            Archivo: routes.py
            --- CONTENIDO de routes.py ---
from flask import render_template, jsonify, request, current_app, flash, redirect, url_for
from app.blueprints.location import bp
from app.models.location import Location
from app.extensions import db
from datetime import datetime
from sqlalchemy import func

@bp.route('/')
def index():
    """Vista principal de locations"""
    current_app.logger.info('Accediendo a la vista de locations')
    locations = Location.query.all()
    
    # Calcular estadísticas
    total_kiosks = sum(len(location.kiosks) for location in locations)
    avg_kiosks_per_location = total_kiosks / len(locations) if locations else 0
    
    return render_template('location/index.html', 
                         locations=locations,
                         total_kiosks=total_kiosks,
                         avg_kiosks_per_location=avg_kiosks_per_location)

@bp.route('/create', methods=['GET', 'POST'])
def create():
    """Vista para crear una nueva ubicación"""
    if request.method == 'POST':
        try:
            location = Location(
                name=request.form['name'],
                address=request.form['address'],
                latitude=float(request.form['latitude']),
                longitude=float(request.form['longitude']),
                description=request.form.get('description', '')
            )
            db.session.add(location)
            db.session.commit()
            flash('Ubicación creada exitosamente', 'success')
            return redirect(url_for('location.index'))
        except Exception as e:
            current_app.logger.error(f'Error al crear ubicación: {str(e)}')
            flash('Error al crear la ubicación', 'danger')
            db.session.rollback()
    
    return render_template('location/create.html')

@bp.route('/api/create', methods=['POST'])
def api_create():
    """API para crear una ubicación"""
    try:
        data = request.get_json()
        location = Location(
            name=data['name'],
            address=data['address'],
            latitude=float(data['latitude']),
            longitude=float(data['longitude']),
            description=data.get('description', '')
        )
        db.session.add(location)
        db.session.commit()
        return jsonify({'success': True, 'location': location.to_dict()})
    except Exception as e:
        current_app.logger.error(f'Error al crear ubicación: {str(e)}')
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 400

@bp.route('/api/update/<int:id>', methods=['PUT'])
def api_update(id):
    """API para actualizar una ubicación"""
    try:
        location = Location.query.get_or_404(id)
        data = request.get_json()
        
        location.name = data.get('name', location.name)
        location.address = data.get('address', location.address)
        location.latitude = float(data.get('latitude', location.latitude))
        location.longitude = float(data.get('longitude', location.longitude))
        location.description = data.get('description', location.description)
        
        db.session.commit()
        return jsonify({'success': True, 'location': location.to_dict()})
    except Exception as e:
        current_app.logger.error(f'Error al actualizar ubicación: {str(e)}')
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 400 

@bp.route('/edit/<int:id>', methods=['GET', 'POST'])
def edit(id):
    """Vista para editar una ubicación existente"""
    location = Location.query.get_or_404(id)
    
    if request.method == 'POST':
        try:
            location.name = request.form['name']
            location.address = request.form['address']
            location.latitude = float(request.form['latitude'])
            location.longitude = float(request.form['longitude'])
            location.description = request.form.get('description', '')
            location.updated_at = datetime.utcnow()
            
            db.session.commit()
            flash('Ubicación actualizada exitosamente', 'success')
            return redirect(url_for('location.index'))
        except Exception as e:
            current_app.logger.error(f'Error al actualizar ubicación: {str(e)}')
            flash('Error al actualizar la ubicación', 'danger')
            db.session.rollback()
    
    return render_template('location/edit.html', location=location) 
        Carpeta: main
            Archivo: __init__.py
            --- CONTENIDO de __init__.py ---
from flask import Blueprint

bp = Blueprint('main', __name__,
               template_folder='../../templates')  # Usar plantillas globales

from app.blueprints.main import routes  # Importar rutas al final para evitar imports circulares 
            Archivo: routes.py
            --- CONTENIDO de routes.py ---
from flask import render_template, current_app
from app.blueprints.main import bp
from app.models.kiosk import Kiosk
from app.models.location import Location
from app.models.state import State
from app.models.settings import Settings
from app.models.kiosk_log import KioskLog

@bp.route('/')
def index():
    """Vista del dashboard principal"""
    current_app.logger.info('Accediendo al dashboard principal')
    
    # Estadísticas para el dashboard
    stats = {
        'total_kiosks': Kiosk.query.count(),
        'online_kiosks': Kiosk.query.filter_by(status='online').count(),
        'offline_kiosks': Kiosk.query.filter_by(status='offline').count(),
        'total_locations': Location.query.count()
    }
    
    # Últimos kiosks actualizados
    kiosks = Kiosk.query.order_by(Kiosk.updated_at.desc()).limit(5).all()
    
    # Logs recientes
    recent_logs = KioskLog.query.order_by(KioskLog.created_at.desc()).limit(10).all()
    
    # Configuraciones del sistema
    settings = Settings.query.first()
    
    return render_template('main/index.html',
                         stats=stats,
                         kiosks=kiosks,
                         recent_logs=recent_logs,
                         settings=settings)

@bp.route('/settings')
def settings():
    """Vista de configuraciones"""
    current_app.logger.info('Accediendo a la vista de configuraciones')
    settings = Settings.query.all()
    return render_template('main/settings.html', settings=settings) 
    Archivo: extensions.py
    --- CONTENIDO de extensions.py ---
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_socketio import SocketIO
from flask_caching import Cache
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_mail import Mail

# Inicializar extensiones
db = SQLAlchemy()
migrate = Migrate()
socketio = SocketIO(async_mode='threading', cors_allowed_origins="*")
cache = Cache()
limiter = Limiter(
    key_func=get_remote_address,
    default_limits=["200 per day", "50 per hour"]
)
mail = Mail()

def init_extensions(app):
    """Inicializa todas las extensiones"""
    # Base de datos y migraciones
    db.init_app(app)
    migrate.init_app(app, db)
    
    # WebSocket
    socketio.init_app(app)
    
    # Cache y rate limiting
    cache.init_app(app)
    limiter.init_app(app)
    
    # Email
    mail.init_app(app) 
    Carpeta: middleware
        Archivo: logging.py
        --- CONTENIDO de logging.py ---
from functools import wraps
import uuid
from flask import request, g
from ..utils.logger import system_logger, error_logger, log_event
import time
from typing import Callable, Any

def generate_request_id() -> str:
    """Generar un ID único para la petición"""
    return str(uuid.uuid4())

def log_request_info(func: Callable) -> Callable:
    """Decorator para logging de información de peticiones"""
    @wraps(func)
    def wrapper(*args: Any, **kwargs: Any) -> Any:
        # Generar ID único para la petición
        request_id = generate_request_id()
        g.request_id = request_id
        
        # Registrar inicio de petición
        start_time = time.time()
        log_event(
            system_logger,
            f"Request started: {request.method} {request.path}",
            trace_id=request_id,
            extra_data={
                'method': request.method,
                'path': request.path,
                'ip': request.remote_addr,
                'user_agent': request.user_agent.string
            }
        )
        
        try:
            # Ejecutar vista
            response = func(*args, **kwargs)
            
            # Registrar fin de petición exitosa
            duration = time.time() - start_time
            log_event(
                system_logger,
                f"Request completed: {request.method} {request.path}",
                trace_id=request_id,
                extra_data={
                    'duration': f"{duration:.3f}s",
                    'status_code': getattr(response, 'status_code', None)
                }
            )
            
            return response
            
        except Exception as e:
            # Registrar error
            duration = time.time() - start_time
            log_event(
                error_logger,
                f"Request failed: {str(e)}",
                level='ERROR',
                trace_id=request_id,
                extra_data={
                    'duration': f"{duration:.3f}s",
                    'error_type': type(e).__name__,
                    'error_details': str(e)
                }
            )
            raise
            
    return wrapper 
    Carpeta: models
        Archivo: __init__.py
        --- CONTENIDO de __init__.py ---
from app.models.kiosk import Kiosk
from app.models.location import Location
from app.models.user import User
from app.models.kiosk_log import KioskLog
from app.models.action import Action
from app.models.state import State
from app.models.settings import Settings
from app.models.kiosk_location import KioskLocation

# Exportar todos los modelos
__all__ = [
    'Kiosk',
    'Location',
    'User',
    'KioskLog',
    'Action',
    'State',
    'Settings',
    'KioskLocation'
] 
        Archivo: action.py
        --- CONTENIDO de action.py ---
from app.extensions import db
from datetime import datetime

class Action(db.Model):
    """Modelo para las acciones que se pueden ejecutar en los kiosks"""
    __tablename__ = 'actions'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), unique=True, nullable=False)
    command = db.Column(db.String(50), unique=True, nullable=False)
    description = db.Column(db.String(200))
    icon_class = db.Column(db.String(50))
    requires_confirmation = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    is_active = db.Column(db.Boolean, default=True)
    
    def __repr__(self):
        return f'<Action {self.name}>'
    
    def to_dict(self):
        """Convierte la acción a un diccionario"""
        return {
            'id': self.id,
            'name': self.name,
            'command': self.command,
            'description': self.description,
            'icon_class': self.icon_class,
            'requires_confirmation': self.requires_confirmation,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'is_active': self.is_active
        } 
        Archivo: kiosk.py
        --- CONTENIDO de kiosk.py ---
"""Modelo para los kiosks"""
from app.extensions import db
from datetime import datetime
from sqlalchemy.dialects.sqlite import JSON
from app.services.alert_service import AlertService
from app.services.location_service import LocationService

class Kiosk(db.Model):
    """Modelo para los kiosks"""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    serial_number = db.Column(db.String(50), unique=True, nullable=False)
    status = db.Column(db.String(20), default='offline')
    ip_address = db.Column(db.String(45))
    location_id = db.Column(db.Integer, db.ForeignKey('location.id'))
    current_latitude = db.Column(db.Float)
    current_longitude = db.Column(db.Float)
    location_mismatch = db.Column(db.Boolean, default=False)
    state_id = db.Column(db.Integer, db.ForeignKey('states.id'))
    last_connection = db.Column(db.DateTime)
    last_action_state = db.Column(db.String(100))
    sensors_data = db.Column(JSON)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relaciones
    location = db.relationship('Location', back_populates='kiosks')
    state = db.relationship('State', back_populates='kiosks')
    logs = db.relationship('KioskLog', backref='kiosk', lazy='dynamic',
                          cascade='all, delete-orphan')
    location_history = db.relationship('KioskLocation', back_populates='kiosk',
                                     cascade='all, delete-orphan')
    
    def check_location_mismatch(self):
        """Verifica si hay discrepancia entre la ubicación asignada y la real"""
        if not self.location:
            return False
            
        self.location_mismatch = LocationService.check_location_mismatch(
            self.current_latitude,
            self.current_longitude,
            self.location.latitude,
            self.location.longitude
        )
        return self.location_mismatch
    
    def calculate_alerts(self):
        """Calcula las alertas basadas en los sensores"""
        return AlertService.calculate_alerts(self.sensors_data)
    
    def change_location(self, new_location, notes=None):
        """Cambia la ubicación del kiosk y registra el cambio"""
        return LocationService.register_location_change(self, new_location, notes)
    
    def get_location_history(self, limit=10):
        """Obtiene el historial de ubicaciones"""
        return LocationService.get_location_history(self.id, limit)
    
    @property
    def sensors_data_dict(self):
        """Obtiene los datos de sensores como diccionario"""
        return self.sensors_data if self.sensors_data else {}
    
    def to_dict(self):
        """Convierte el kiosk a diccionario"""
        return {
            'id': self.id,
            'name': self.name,
            'serial_number': self.serial_number,
            'status': self.status,
            'ip_address': self.ip_address,
            'location_id': self.location_id,
            'location_name': self.location.name if self.location else None,
            'current_latitude': self.current_latitude,
            'current_longitude': self.current_longitude,
            'location_mismatch': self.location_mismatch,
            'last_connection': self.last_connection.strftime('%Y-%m-%d %H:%M:%S') if self.last_connection else None,
            'last_action_state': self.last_action_state,
            'sensors_data': self.sensors_data_dict,
            'alerts': self.calculate_alerts()
        }
    
    def __repr__(self):
        return f'<Kiosk {self.name}>' 
        Archivo: kiosk_location.py
        --- CONTENIDO de kiosk_location.py ---
from app.extensions import db
from datetime import datetime

class KioskLocation(db.Model):
    """Modelo para registrar el historial de ubicaciones de los kioscos"""
    __tablename__ = 'kiosk_location'
    
    id = db.Column(db.Integer, primary_key=True)
    kiosk_id = db.Column(db.Integer, db.ForeignKey('kiosk.id'), nullable=False)
    location_id = db.Column(db.Integer, db.ForeignKey('location.id'), nullable=False)
    start_date = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    end_date = db.Column(db.DateTime)
    
    # Relaciones
    kiosk = db.relationship('Kiosk', back_populates='location_history')
    location = db.relationship('Location', back_populates='kiosk_history')
    
    def __repr__(self):
        return f'<KioskLocation {self.kiosk_id} at {self.location_id}>'
    
    def to_dict(self):
        return {
            'id': self.id,
            'kiosk_id': self.kiosk_id,
            'location_id': self.location_id,
            'start_date': self.start_date.isoformat() if self.start_date else None,
            'end_date': self.end_date.isoformat() if self.end_date else None
        } 
        Archivo: kiosk_log.py
        --- CONTENIDO de kiosk_log.py ---
from app.extensions import db
from datetime import datetime

class KioskLog(db.Model):
    """Modelo para el registro de eventos de los kiosks"""
    __tablename__ = 'kiosk_logs'
    
    id = db.Column(db.Integer, primary_key=True)
    kiosk_id = db.Column(db.Integer, db.ForeignKey('kiosk.id'), nullable=False)
    event_type = db.Column(db.String(50), nullable=False)
    message = db.Column(db.String(500), nullable=False)
    details = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    created_by = db.Column(db.String(100))
    
    # Tipos de eventos predefinidos
    EVENT_TYPES = {
        'info': 'Información',
        'warning': 'Advertencia',
        'error': 'Error',
        'success': 'Éxito',
        'alert': 'Alerta',
        'action': 'Acción',
        'state': 'Estado',
        'location': 'Ubicación'
    }
    
    @property
    def event_type_display(self):
        """Obtiene el nombre para mostrar del tipo de evento"""
        return self.EVENT_TYPES.get(self.event_type, self.event_type)
    
    def to_dict(self):
        """Convierte el log a diccionario"""
        return {
            'id': self.id,
            'kiosk_id': self.kiosk_id,
            'event_type': self.event_type,
            'event_type_display': self.event_type_display,
            'message': self.message,
            'details': self.details,
            'created_at': self.created_at.strftime('%Y-%m-%d %H:%M:%S'),
            'created_by': self.created_by
        }
    
    @classmethod
    def create_log(cls, kiosk_id, event_type, message, details=None, created_by=None):
        """Crea un nuevo registro de log"""
        log = cls(
            kiosk_id=kiosk_id,
            event_type=event_type,
            message=message,
            details=details,
            created_by=created_by
        )
        db.session.add(log)
        db.session.commit()
        return log
    
    def __repr__(self):
        return f'<KioskLog {self.event_type} for Kiosk {self.kiosk_id}>' 
        Archivo: location.py
        --- CONTENIDO de location.py ---
from app.extensions import db
from datetime import datetime

class Location(db.Model):
    """Modelo para las ubicaciones"""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    address = db.Column(db.String(255), nullable=False)
    latitude = db.Column(db.Float, nullable=False)
    longitude = db.Column(db.Float, nullable=False)
    description = db.Column(db.Text, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relaciones
    kiosks = db.relationship('Kiosk', back_populates='location', lazy='joined')
    kiosk_history = db.relationship('KioskLocation', back_populates='location',
                                  cascade='all, delete-orphan')
    
    def to_dict(self):
        """Convierte la ubicación a diccionario"""
        return {
            'id': self.id,
            'name': self.name,
            'address': self.address,
            'latitude': self.latitude,
            'longitude': self.longitude,
            'description': self.description or '',
            'kiosks_count': len(self.kiosks),
            'created_at': self.created_at.strftime('%Y-%m-%d %H:%M:%S'),
            'updated_at': self.updated_at.strftime('%Y-%m-%d %H:%M:%S')
        }
    
    def __repr__(self):
        return f'<Location {self.name}>' 
        Archivo: settings.py
        --- CONTENIDO de settings.py ---
from app.extensions import db

class Settings(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(50), unique=True, nullable=False)
    value = db.Column(db.String(200))
    description = db.Column(db.String(200))
    
    DEFAULT_SETTINGS = {
        'system_name': ('Admin Kiosk', 'Nombre del sistema'),
        'refresh_interval': ('5', 'Intervalo de actualización en segundos'),
        'max_logs': ('100', 'Máximo número de logs a mostrar'),
        'cpu_warning': ('80', 'Umbral de advertencia de CPU (%)'),
        'cpu_critical': ('90', 'Umbral crítico de CPU (%)'),
        'ram_warning': ('85', 'Umbral de advertencia de RAM (%)'),
        'ram_critical': ('95', 'Umbral crítico de RAM (%)'),
        'disk_warning': ('85', 'Umbral de advertencia de disco (%)'),
        'disk_critical': ('95', 'Umbral crítico de disco (%)'),
    }
    
    @classmethod
    def initialize_defaults(cls):
        """Inicializa las configuraciones por defecto si no existen"""
        for key, (value, description) in cls.DEFAULT_SETTINGS.items():
            if not cls.query.filter_by(key=key).first():
                setting = cls(key=key, value=value, description=description)
                db.session.add(setting)
        db.session.commit()
    
    @classmethod
    def get_value(cls, key, default=None):
        """Obtiene el valor de una configuración"""
        setting = cls.query.filter_by(key=key).first()
        return setting.value if setting else default
    
    @classmethod
    def set_value(cls, key, value):
        """Establece el valor de una configuración"""
        setting = cls.query.filter_by(key=key).first()
        if setting:
            setting.value = str(value)
            db.session.commit()
        else:
            description = cls.DEFAULT_SETTINGS.get(key, ('', ''))[1]
            setting = cls(key=key, value=str(value), description=description)
            db.session.add(setting)
            db.session.commit()
        return setting 
        Archivo: state.py
        --- CONTENIDO de state.py ---
from app.extensions import db
from datetime import datetime

class State(db.Model):
    """Modelo para los estados de los kiosks"""
    __tablename__ = 'states'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), unique=True, nullable=False)
    description = db.Column(db.String(200))
    color_class = db.Column(db.String(20), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    is_active = db.Column(db.Boolean, default=True)
    
    # Relaciones
    kiosks = db.relationship('Kiosk', back_populates='state', lazy='dynamic')
    
    def __repr__(self):
        return f'<State {self.name}>'
    
    def to_dict(self):
        """Convierte el estado a un diccionario"""
        return {
            'id': self.id,
            'name': self.name,
            'description': self.description,
            'color_class': self.color_class,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'is_active': self.is_active
        } 
        Archivo: user.py
        --- CONTENIDO de user.py ---
from app.extensions import db
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash

class User(db.Model):
    """Modelo para los usuarios del sistema"""
    __tablename__ = 'users'
    
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(256))
    is_admin = db.Column(db.Boolean, default=False)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def __repr__(self):
        return f'<User {self.username}>'
    
    def set_password(self, password):
        """Establecer el hash de la contraseña"""
        self.password_hash = generate_password_hash(password)
    
    def check_password(self, password):
        """Verificar la contraseña"""
        return check_password_hash(self.password_hash, password)
    
    def to_dict(self):
        """Convertir el objeto a un diccionario para la API"""
        return {
            'id': self.id,
            'username': self.username,
            'email': self.email,
            'is_admin': self.is_admin,
            'is_active': self.is_active,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }
    
    @staticmethod
    def get_by_username(username):
        """Obtener un usuario por su nombre de usuario"""
        return User.query.filter_by(username=username).first()
    
    @staticmethod
    def get_by_email(email):
        """Obtener un usuario por su email"""
        return User.query.filter_by(email=email).first()
    
    @staticmethod
    def get_active_users():
        """Obtener todos los usuarios activos"""
        return User.query.filter_by(is_active=True).all() 
    Carpeta: services
        Archivo: __init__.py
        --- CONTENIDO de __init__.py ---
"""
Servicios para la lógica de negocio de la aplicación.
Los servicios manejan la lógica compleja que no pertenece directamente a los modelos.
""" 
        Archivo: alert_service.py
        --- CONTENIDO de alert_service.py ---
"""Servicio para manejar las alertas del sistema"""

class AlertService:
    # Umbrales de alertas
    CPU_WARNING = 80
    CPU_CRITICAL = 90
    RAM_WARNING = 85
    RAM_CRITICAL = 95
    DISK_WARNING = 85
    DISK_CRITICAL = 95
    TEMP_WARNING = 35
    TEMP_CRITICAL = 40
    LATENCY_WARNING = 100
    LATENCY_CRITICAL = 150
    
    @staticmethod
    def calculate_alerts(sensors_data):
        """Calcula todas las alertas basadas en los datos de sensores"""
        if not sensors_data:
            return []
            
        alerts = []
        alerts.extend(AlertService._check_cpu(sensors_data))
        alerts.extend(AlertService._check_ram(sensors_data))
        alerts.extend(AlertService._check_disk(sensors_data))
        alerts.extend(AlertService._check_temperature(sensors_data))
        alerts.extend(AlertService._check_network(sensors_data))
        alerts.extend(AlertService._check_ups(sensors_data))
        return alerts
    
    @staticmethod
    def _check_cpu(sensors_data):
        """Verifica alertas de CPU"""
        alerts = []
        cpu = float(sensors_data.get('cpu_usage', 0))
        
        if cpu > AlertService.CPU_CRITICAL:
            alerts.append({
                'type': 'danger',
                'message': f'CPU crítico: {cpu:.1f}%'
            })
        elif cpu > AlertService.CPU_WARNING:
            alerts.append({
                'type': 'warning',
                'message': f'CPU alto: {cpu:.1f}%'
            })
        return alerts
    
    @staticmethod
    def _check_ram(sensors_data):
        """Verifica alertas de RAM"""
        alerts = []
        ram = float(sensors_data.get('ram_usage', 0))
        
        if ram > AlertService.RAM_CRITICAL:
            alerts.append({
                'type': 'danger',
                'message': f'RAM crítica: {ram:.1f}%'
            })
        elif ram > AlertService.RAM_WARNING:
            alerts.append({
                'type': 'warning',
                'message': f'RAM alta: {ram:.1f}%'
            })
        return alerts
    
    @staticmethod
    def _check_disk(sensors_data):
        """Verifica alertas de disco"""
        alerts = []
        disk = float(sensors_data.get('disk_usage', 0))
        
        if disk > AlertService.DISK_CRITICAL:
            alerts.append({
                'type': 'danger',
                'message': f'Disco crítico: {disk:.1f}%'
            })
        elif disk > AlertService.DISK_WARNING:
            alerts.append({
                'type': 'warning',
                'message': f'Disco alto: {disk:.1f}%'
            })
        return alerts
    
    @staticmethod
    def _check_temperature(sensors_data):
        """Verifica alertas de temperatura"""
        alerts = []
        temp = float(sensors_data.get('temperature', 0))
        
        if temp > AlertService.TEMP_CRITICAL:
            alerts.append({
                'type': 'danger',
                'message': f'Temperatura crítica: {temp:.1f}°C'
            })
        elif temp > AlertService.TEMP_WARNING:
            alerts.append({
                'type': 'warning',
                'message': f'Temperatura alta: {temp:.1f}°C'
            })
        return alerts
    
    @staticmethod
    def _check_network(sensors_data):
        """Verifica alertas de red"""
        alerts = []
        network = sensors_data.get('network', {})
        latency = float(network.get('latency', 0))
        
        if latency > AlertService.LATENCY_CRITICAL:
            alerts.append({
                'type': 'danger',
                'message': f'Latencia crítica: {latency:.0f}ms'
            })
        elif latency > AlertService.LATENCY_WARNING:
            alerts.append({
                'type': 'warning',
                'message': f'Latencia alta: {latency:.0f}ms'
            })
        return alerts
    
    @staticmethod
    def _check_ups(sensors_data):
        """Verifica alertas de UPS"""
        alerts = []
        ups = sensors_data.get('ups', {})
        
        if ups.get('status') == 'battery':
            battery = float(ups.get('battery_level', 0))
            runtime = int(ups.get('estimated_runtime', 0))
            
            if battery < 20:
                alerts.append({
                    'type': 'danger',
                    'message': f'Batería crítica: {battery:.1f}% ({runtime}min restantes)'
                })
            elif battery < 50:
                alerts.append({
                    'type': 'warning',
                    'message': f'En batería: {battery:.1f}% ({runtime}min restantes)'
                })
        return alerts 
        Archivo: kiosk_ws.py
        --- CONTENIDO de kiosk_ws.py ---
from flask_socketio import emit, join_room, leave_room
from app import socketio, db
from app.models.kiosk import Kiosk
from app.models.kiosk_log import KioskLog
from datetime import datetime
import json

@socketio.on('connect')
def handle_connect():
    """Manejar conexión de cliente"""
    emit('connect', {'data': 'Conectado al servidor'})

@socketio.on('disconnect')
def handle_disconnect():
    """Manejar desconexión de cliente"""
    pass

@socketio.on('join')
def handle_join(data):
    """Manejar unión a una sala de kiosk"""
    kiosk_id = data.get('kiosk_id')
    if kiosk_id:
        join_room(f'kiosk_{kiosk_id}')
        emit('join', {'data': f'Unido a la sala del kiosk {kiosk_id}'})

@socketio.on('leave')
def handle_leave(data):
    """Manejar salida de una sala de kiosk"""
    kiosk_id = data.get('kiosk_id')
    if kiosk_id:
        leave_room(f'kiosk_{kiosk_id}')
        emit('leave', {'data': f'Salido de la sala del kiosk {kiosk_id}'})

@socketio.on('kiosk_update')
def handle_kiosk_update(data):
    """Manejar actualización de estado de kiosk"""
    try:
        kiosk_id = data.get('kiosk_id')
        sensors_data = data.get('sensors_data')
        
        if not kiosk_id or not sensors_data:
            raise ValueError('Se requiere kiosk_id y sensors_data')
        
        kiosk = Kiosk.query.get(kiosk_id)
        if not kiosk:
            raise ValueError(f'Kiosk {kiosk_id} no encontrado')
        
        # Actualizar datos del kiosk
        kiosk.last_connection = datetime.utcnow()
        kiosk.update_sensor_data(sensors_data)
        
        # Registrar actualización en el log
        KioskLog.log_event(
            kiosk_id=kiosk.id,
            event_type='update',
            message='Actualización de sensores recibida',
            details=sensors_data
        )
        
        # Emitir actualización a todos los clientes en la sala del kiosk
        emit('kiosk_update', kiosk.to_dict(), room=f'kiosk_{kiosk_id}')
        
        db.session.commit()
        
    except Exception as e:
        db.session.rollback()
        emit('error', {'message': str(e)})

@socketio.on('execute_action')
def handle_execute_action(data):
    """Manejar ejecución de acción en kiosk"""
    try:
        kiosk_id = data.get('kiosk_id')
        action_id = data.get('action_id')
        
        if not kiosk_id or not action_id:
            raise ValueError('Se requiere kiosk_id y action_id')
        
        kiosk = Kiosk.query.get(kiosk_id)
        if not kiosk:
            raise ValueError(f'Kiosk {kiosk_id} no encontrado')
        
        # Aquí iría la lógica para ejecutar la acción en el kiosk
        # Por ahora solo registramos el intento
        
        # Registrar acción en el log
        KioskLog.log_event(
            kiosk_id=kiosk.id,
            event_type='action',
            message=f'Acción {action_id} ejecutada',
            details={'action_id': action_id}
        )
        
        # Emitir confirmación a todos los clientes en la sala del kiosk
        emit('action_executed', {
            'kiosk_id': kiosk_id,
            'action_id': action_id,
            'status': 'success'
        }, room=f'kiosk_{kiosk_id}')
        
        db.session.commit()
        
    except Exception as e:
        db.session.rollback()
        emit('error', {'message': str(e)}) 
        Archivo: location_service.py
        --- CONTENIDO de location_service.py ---
"""Servicio para manejar la lógica de ubicaciones"""
from datetime import datetime
from app.models.kiosk_location import KioskLocation
from app.extensions import db

class LocationService:
    # Margen de error aceptable en grados (aproximadamente 11 metros)
    LOCATION_MARGIN = 0.0001
    
    @staticmethod
    def check_location_mismatch(current_lat, current_lon, assigned_lat, assigned_lon):
        """
        Verifica si hay discrepancia entre la ubicación actual y la asignada
        """
        if None in (current_lat, current_lon, assigned_lat, assigned_lon):
            return False
            
        lat_diff = abs(assigned_lat - current_lat)
        lon_diff = abs(assigned_lon - current_lon)
        
        return lat_diff > LocationService.LOCATION_MARGIN or lon_diff > LocationService.LOCATION_MARGIN
    
    @staticmethod
    def register_location_change(kiosk, new_location, notes=None):
        """
        Registra un cambio de ubicación en el historial
        """
        # Cerrar el registro anterior si existe
        current_history = KioskLocation.query.filter_by(
            kiosk_id=kiosk.id,
            end_date=None
        ).first()
        
        if current_history:
            current_history.end_date = datetime.utcnow()
        
        # Crear nuevo registro
        new_history = KioskLocation(
            kiosk_id=kiosk.id,
            location_id=new_location.id,
            start_date=datetime.utcnow(),
            notes=notes
        )
        
        db.session.add(new_history)
        
        # Actualizar ubicación del kiosk
        kiosk.location = new_location
        
        try:
            db.session.commit()
            return True
        except Exception as e:
            db.session.rollback()
            raise e
    
    @staticmethod
    def get_location_history(kiosk_id, limit=10):
        """
        Obtiene el historial de ubicaciones de un kiosk
        """
        return KioskLocation.query.filter_by(kiosk_id=kiosk_id)\
            .order_by(KioskLocation.start_date.desc())\
            .limit(limit)\
            .all() 
    Carpeta: static
        Carpeta: css
            Archivo: sb-admin-2.min.css
            --- CONTENIDO de sb-admin-2.min.css ---
/*!
 * Start Bootstrap - SB Admin 2 v4.1.3 (https://startbootstrap.com/theme/sb-admin-2)
 * Copyright 2013-2021 Start Bootstrap
 * Licensed under MIT (https://github.com/StartBootstrap/startbootstrap-sb-admin-2/blob/master/LICENSE)
 */

/* Variables y configuración base */
:root {
    --blue: #4e73df;
    --primary: #4e73df;
    --secondary: #858796;
    --success: #1cc88a;
    --info: #36b9cc;
    --warning: #f6c23e;
    --danger: #e74a3b;
    --light: #f8f9fc;
    --dark: #5a5c69;
}

/* Estilos base */
body {
    margin: 0;
    font-family: "Nunito", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5;
    color: #858796;
    text-align: left;
    background-color: #fff;
}

/* Wrapper y contenedor principal */
#wrapper {
    display: flex;
}

/* Sidebar */
.sidebar {
    width: 14rem;
    min-height: 100vh;
    background-color: var(--primary);
    background-image: linear-gradient(180deg, var(--primary) 10%, #224abe 100%);
    background-size: cover;
    position: fixed;
    z-index: 1;
}

.sidebar .nav-item {
    position: relative;
    padding: 0 1rem;
}

.sidebar .nav-item .nav-link {
    display: block;
    padding: 1rem;
    color: rgba(255, 255, 255, 0.8);
    width: 100%;
}

.sidebar .nav-item .nav-link:hover {
    color: #fff;
    background-color: rgba(255, 255, 255, 0.1);
}

.sidebar .nav-item .nav-link i {
    margin-right: 0.5rem;
}

/* Content Wrapper */
#content-wrapper {
    width: 100%;
    margin-left: 14rem;
    background-color: #f8f9fc;
    min-height: 100vh;
}

/* Content */
#content {
    flex: 1 0 auto;
    padding: 1.5rem;
}

/* Contenedor fluido */
.container-fluid {
    padding: 1.5rem;
    width: 100%;
}

/* Footer */
.sticky-footer {
    padding: 2rem 0;
    flex-shrink: 0;
    background-color: #fff;
}

/* Utilidades */
.bg-gradient-primary {
    background-color: var(--primary);
    background-image: linear-gradient(180deg, var(--primary) 10%, #224abe 100%);
}

.text-primary { color: var(--primary) !important; }
.bg-white { background-color: #fff !important; }

/* Media queries */
@media (max-width: 768px) {
    .sidebar {
        width: 0;
        overflow: hidden;
    }
    
    #content-wrapper {
        margin-left: 0;
    }
} 
            Archivo: style.css
            --- CONTENIDO de style.css ---
:root {
    --sidebar-width: 250px;
    --header-height: 60px;
    --primary-color: #0d6efd;
    --secondary-color: #6c757d;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f8f9fa;
}

/* Sidebar */
.sidebar {
    position: fixed;
    top: 0;
    left: 0;
    bottom: 0;
    width: var(--sidebar-width);
    background: #fff;
    box-shadow: 0 0 15px rgba(0,0,0,0.1);
    z-index: 1000;
    transition: all 0.3s ease;
}

.sidebar-header {
    height: var(--header-height);
    display: flex;
    align-items: center;
    padding: 0 1rem;
    background: var(--primary-color);
}

.brand-link {
    font-size: 1.25rem;
    font-weight: bold;
    color: white;
    text-decoration: none;
}

.brand-link:hover {
    color: rgba(255,255,255,0.8);
    text-decoration: none;
}

.sidebar-nav {
    padding: 1rem 0;
}

.nav-item {
    margin: 0.25rem 1rem;
}

.nav-link {
    display: flex;
    align-items: center;
    padding: 0.75rem 1rem;
    color: var(--secondary-color);
    border-radius: 0.375rem;
    transition: all 0.2s ease;
    text-decoration: none;
}

.nav-link:hover {
    color: var(--primary-color);
    background-color: rgba(13,110,253,0.1);
    text-decoration: none;
}

.nav-link.active {
    color: var(--primary-color);
    background-color: rgba(13,110,253,0.1);
    font-weight: 500;
}

.nav-link i {
    width: 1.25rem;
    margin-right: 0.75rem;
    text-align: center;
}

/* Main wrapper */
.main-wrapper {
    margin-left: var(--sidebar-width);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

/* Main content */
.main-content {
    flex: 1;
    padding: calc(var(--header-height) + 1.5rem) 1.5rem 1.5rem;
}

/* Header */
.main-header {
    position: fixed;
    top: 0;
    right: 0;
    left: var(--sidebar-width);
    height: var(--header-height);
    background: #fff;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    z-index: 900;
    padding: 0 1.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.header-title {
    font-size: 1.25rem;
    font-weight: 500;
    color: var(--secondary-color);
    margin: 0;
}

.header-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
}

/* Cards */
.card {
    border: none;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.card-header {
    background-color: #fff;
    border-bottom: 1px solid rgba(0,0,0,0.1);
    padding: 1rem;
}

.card-title {
    margin: 0;
    color: var(--secondary-color);
    font-weight: 500;
}

/* Responsive */
@media (max-width: 768px) {
    .sidebar {
        transform: translateX(-100%);
    }
    
    .sidebar.show {
        transform: translateX(0);
    }
    
    .main-wrapper {
        margin-left: 0;
    }
    
    .main-header {
        left: 0;
    }
    
    .toggle-sidebar {
        display: block !important;
    }
}

/* Utilities */
.toggle-sidebar {
    display: none;
    background: none;
    border: none;
    color: var(--secondary-color);
    font-size: 1.25rem;
    padding: 0.5rem;
    cursor: pointer;
}

.toggle-sidebar:hover {
    color: var(--primary-color);
} 
        Carpeta: img
            Archivo: undraw_profile.svg
        Carpeta: js
            Archivo: filters.js
            --- CONTENIDO de filters.js ---
// Función para aplicar filtros
function applyFilters() {
    const selectedLocation = $('#location-filter').val();
    const selectedState = $('#state-filter').val();
    const searchText = $('#search-filter').val().toLowerCase();

    $('.kiosk-card').each(function() {
        const card = $(this);
        const locationId = card.data('location-id');
        const state = card.find('.badge').text().toLowerCase();
        const kioskName = card.find('.kiosk-name').text().toLowerCase();
        const serialNumber = card.find('.serial-number').text().toLowerCase();

        const locationMatch = selectedLocation === '' || locationId === parseInt(selectedLocation);
        const stateMatch = selectedState === '' || state === selectedState.toLowerCase();
        const searchMatch = searchText === '' || 
                          kioskName.includes(searchText) || 
                          serialNumber.includes(searchText);

        if (locationMatch && stateMatch && searchMatch) {
            card.show();
        } else {
            card.hide();
        }
    });

    // Actualizar contador de kiosks visibles
    const visibleKiosks = $('.kiosk-card:visible').length;
    const totalKiosks = $('.kiosk-card').length;
    $('#kiosk-counter').text(`Mostrando ${visibleKiosks} de ${totalKiosks} kiosks`);
}

// Inicializar filtros
$(document).ready(function() {
    // Agregar eventos de cambio a los filtros
    $('#location-filter, #state-filter').change(function() {
        applyFilters();
    });

    // Agregar evento de búsqueda con debounce
    let searchTimeout;
    $('#search-filter').on('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(applyFilters, 300);
    });

    // Aplicar filtros iniciales
    applyFilters();
});

// Función para limpiar filtros
function clearFilters() {
    $('#location-filter').val('');
    $('#state-filter').val('');
    $('#search-filter').val('');
    applyFilters();
} 
            Archivo: kiosk_actions.js
            --- CONTENIDO de kiosk_actions.js ---
// Funciones para manejo de acciones de kiosks
const KioskActions = {
    socket: null,
    
    // Inicializar WebSocket
    init: function() {
        this.socket = io('/kiosk');
        this.setupSocketListeners();
        this.setupEventListeners();
    },
    
    // Configurar listeners de WebSocket
    setupSocketListeners: function() {
        this.socket.on('connect', () => {
            console.log('WebSocket conectado');
        });
        
        this.socket.on('disconnect', () => {
            console.log('WebSocket desconectado');
        });
        
        this.socket.on('kiosk_update', data => {
            this.updateKioskCard(data);
        });
        
        this.socket.on('kiosk_action_update', data => {
            this.updateActionState(data.kiosk_id, data.state);
        });
    },
    
    // Configurar listeners de eventos
    setupEventListeners: function() {
        $(document).on('click', '.action-btn', event => {
            const btn = $(event.currentTarget);
            const card = btn.closest('[data-kiosk-id]');
            const kioskId = card.data('kioskId');
            const actionId = btn.data('actionId');
            const actionName = btn.data('actionName');
            const requiresConfirmation = btn.data('requiresConfirmation');
            
            this.executeAction(kioskId, actionId, actionName, requiresConfirmation);
        });
    },
    
    // Ejecutar una acción en un kiosk
    executeAction: function(kioskId, actionId, actionName, requiresConfirmation) {
        if (requiresConfirmation && !confirm(`¿Está seguro que desea ejecutar la acción "${actionName}"?`)) {
            return;
        }
        
        return $.ajax({
            url: `/kiosk/api/execute/${kioskId}/${actionId}`,
            method: 'POST',
            contentType: 'application/json'
        }).then(response => {
            this.showNotification('success', 'Acción ejecutada exitosamente');
            return response;
        }).catch(xhr => {
            const message = xhr.responseJSON?.message || 'Error al ejecutar la acción';
            this.showNotification('danger', message);
            throw xhr;
        });
    },

    // Asignar ubicación a un kiosk
    assignLocation: function(kioskId, locationId, notes) {
        return $.ajax({
            url: '/location/api/assign-kiosk',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                kiosk_id: kioskId,
                location_id: locationId,
                notes: notes || ''
            })
        }).then(response => {
            this.showNotification('success', 'Ubicación asignada exitosamente');
            return response;
        }).catch(xhr => {
            const message = xhr.responseJSON?.message || 'Error al asignar la ubicación';
            this.showNotification('danger', message);
            throw xhr;
        });
    },

    // Actualizar tarjeta de kiosk con nuevos datos
    updateKioskCard: function(data) {
        const card = $(`[data-kiosk-id="${data.id}"]`);
        if (!card.length) return;
        
        // Actualizar estado
        card.find('.status-badge')
            .removeClass('bg-success bg-danger')
            .addClass(`bg-${data.status === 'online' ? 'success' : 'danger'}`)
            .text(data.status.charAt(0).toUpperCase() + data.status.slice(1));
        
        if (!data.sensors_data) return;
        
        // Actualizar métricas de sistema
        this.updateProgressBar(card.find('.cpu-bar'), data.sensors_data.cpu_usage);
        this.updateProgressBar(card.find('.ram-bar'), data.sensors_data.ram_usage);
        this.updateProgressBar(card.find('.disk-bar'), data.sensors_data.disk_usage);
        
        // Actualizar métricas de ambiente
        card.find('.temp-value')
            .removeClass('text-danger text-warning')
            .addClass(data.sensors_data.temperature > 40 ? 'text-danger' : 
                     data.sensors_data.temperature > 35 ? 'text-warning' : '')
            .text(`${data.sensors_data.temperature}°C`);
        
        card.find('.humidity-value').text(`${data.sensors_data.humidity}%`);
        
        // Actualizar red
        card.find('.latency-value').text(`${data.sensors_data.network.latency}ms`);
        card.find('.speed-value').text(`↓${data.sensors_data.network.download_speed}Mbps`);
        card.find('.signal-value')
            .removeClass('text-warning')
            .addClass(data.sensors_data.network.signal_strength < 30 ? 'text-warning' : '')
            .text(`${data.sensors_data.network.signal_strength}%`);
        
        // Actualizar UPS si existe
        if (data.sensors_data.ups) {
            const upsSection = card.find('.ups-section');
            if (!upsSection.length) {
                // TODO: Crear sección UPS si no existe
            } else {
                upsSection.find('.battery-value')
                    .removeClass('text-danger')
                    .addClass(data.sensors_data.ups.battery_level < 10 ? 'text-danger' : '')
                    .text(`${data.sensors_data.ups.battery_level}%`);
                upsSection.find('.runtime-value').text(`${data.sensors_data.ups.estimated_runtime}min`);
            }
        }
        
        // Actualizar alertas
        const alertsSection = card.find('.alerts-section').empty();
        data.sensors_data.errors?.forEach(error => {
            alertsSection.append(`
                <div class="alert alert-danger py-1 px-2 mb-1">${error}</div>
            `);
        });
        data.sensors_data.warnings?.forEach(warning => {
            alertsSection.append(`
                <div class="alert alert-warning py-1 px-2 mb-1">${warning}</div>
            `);
        });
    },
    
    // Actualizar estado de acción
    updateActionState: function(kioskId, state) {
        const card = $(`[data-kiosk-id="${kioskId}"]`);
        if (!card.length) return;
        
        card.find('.action-state').text(state);
    },
    
    // Actualizar barra de progreso
    updateProgressBar: function(bar, value) {
        if (!bar.length) return;
        
        const oldValue = bar.data('value');
        bar.data('value', value)
           .css('width', `${value}%`)
           .text(`${bar.text().split(':')[0]}: ${value}%`)
           .removeClass('bg-success bg-warning bg-danger')
           .addClass(this.getProgressBarClass(value, bar.hasClass('ram-bar')));
        
        if (oldValue !== value) {
            bar.addClass('progress-bar-animated').addClass('progress-bar-striped');
            setTimeout(() => {
                bar.removeClass('progress-bar-animated').removeClass('progress-bar-striped');
            }, 1000);
        }
    },
    
    // Obtener clase para barra de progreso
    getProgressBarClass: function(value, isRam) {
        if (isRam) {
            return value > 95 ? 'bg-danger' : value > 85 ? 'bg-warning' : 'bg-success';
        }
        return value > 90 ? 'bg-danger' : value > 80 ? 'bg-warning' : 'bg-success';
    },

    // Mostrar notificación
    showNotification: function(type, message) {
        const alert = $(`
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `);
        $('.container-fluid').prepend(alert);
        
        // Auto-ocultar después de 5 segundos
        setTimeout(() => alert.alert('close'), 5000);
    }
};

// Inicializar cuando el documento esté listo
$(document).ready(() => {
    KioskActions.init();
}); 
            Archivo: main.js
            --- CONTENIDO de main.js ---
// Toggle sidebar on mobile
document.querySelector('.toggle-sidebar').addEventListener('click', function() {
    document.querySelector('.sidebar').classList.toggle('show');
});

// Show notifications
function showNotification(type, message) {
    const alert = document.createElement('div');
    alert.className = `alert alert-${type} alert-dismissible fade show`;
    alert.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    document.querySelector('.main-content').insertAdjacentElement('afterbegin', alert);
    
    // Auto-dismiss after 5 seconds
    setTimeout(() => {
        alert.classList.remove('show');
        setTimeout(() => alert.remove(), 150);
    }, 5000);
} 
            Archivo: sb-admin-2.min.js
            --- CONTENIDO de sb-admin-2.min.js ---
/*!
 * Start Bootstrap - SB Admin 2 v4.1.3 (https://startbootstrap.com/theme/sb-admin-2)
 * Copyright 2013-2021 Start Bootstrap
 * Licensed under MIT (https://github.com/StartBootstrap/startbootstrap-sb-admin-2/blob/master/LICENSE)
 */
!function(l){"use strict";l("#sidebarToggle, #sidebarToggleTop").on("click",function(e){l("body").toggleClass("sidebar-toggled"),l(".sidebar").toggleClass("toggled"),l(".sidebar").hasClass("toggled")&&l(".sidebar .collapse").collapse("hide")}),l(window).resize(function(){l(window).width()<768&&l(".sidebar .collapse").collapse("hide"),l(window).width()<480&&!l(".sidebar").hasClass("toggled")&&(l("body").addClass("sidebar-toggled"),l(".sidebar").addClass("toggled"),l(".sidebar .collapse").collapse("hide"))}),l("body.fixed-nav .sidebar").on("mousewheel DOMMouseScroll wheel",function(e){var o;768<l(window).width()&&(o=(o=e.originalEvent).wheelDelta||-o.detail,this.scrollTop+=30*(o<0?1:-1),e.preventDefault())}),l(document).on("scroll",function(){100<l(this).scrollTop()?l(".scroll-to-top").fadeIn():l(".scroll-to-top").fadeOut()}),l(document).on("click","a.scroll-to-top",function(e){var o=l(this);l("html, body").stop().animate({scrollTop:l(o.attr("href")).offset().top},1e3,"easeInOutExpo"),e.preventDefault()})}(jQuery); 
        Carpeta: uploads
    Carpeta: templates
        Carpeta: kiosk
            Archivo: card.html
            --- CONTENIDO de card.html ---
{% macro render_kiosk_card(kiosk) %}
<div class="card h-100" data-kiosk-id="{{ kiosk.id }}">
    <!-- 1. ENCABEZADO -->
    <div class="card-header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h5 class="card-title mb-0">{{ kiosk.name }}</h5>
                <small class="text-muted">SN: {{ kiosk.serial_number }}</small>
            </div>
            <div class="text-end">
                <span class="badge bg-{{ 'success' if kiosk.status == 'online' else 'danger' }} status-badge">
                    {{ kiosk.status|title }}
                </span>
                {% if kiosk.last_action_state %}
                    <div><small class="text-muted action-state">{{ kiosk.last_action_state }}</small></div>
                {% endif %}
            </div>
        </div>
    </div>
    
    <div class="card-body">
        <!-- 2. MÉTRICAS DE SISTEMA -->
        {% if kiosk.sensors_data_dict %}
            <div class="mb-3">
                <h6 class="card-subtitle mb-2">Sistema</h6>
                <div class="progress mb-2" style="height: 20px;">
                    {% set cpu = kiosk.sensors_data_dict.cpu_usage|default(0) %}
                    {% set cpu_class = 'bg-danger' if cpu > 90 else 'bg-warning' if cpu > 80 else 'bg-success' %}
                    <div class="progress-bar {{ cpu_class }} cpu-bar" role="progressbar" style="width: {{ cpu }}%" data-value="{{ cpu }}">
                        CPU: {{ cpu }}%
                    </div>
                </div>
                <div class="progress mb-2" style="height: 20px;">
                    {% set ram = kiosk.sensors_data_dict.ram_usage|default(0) %}
                    {% set ram_class = 'bg-danger' if ram > 95 else 'bg-warning' if ram > 85 else 'bg-success' %}
                    <div class="progress-bar {{ ram_class }} ram-bar" role="progressbar" style="width: {{ ram }}%" data-value="{{ ram }}">
                        RAM: {{ ram }}%
                    </div>
                </div>
                <div class="progress mb-2" style="height: 20px;">
                    {% set disk = kiosk.sensors_data_dict.disk_usage|default(0) %}
                    {% set disk_class = 'bg-danger' if disk > 95 else 'bg-warning' if disk > 85 else 'bg-success' %}
                    <div class="progress-bar {{ disk_class }} disk-bar" role="progressbar" style="width: {{ disk }}%" data-value="{{ disk }}">
                        Disco: {{ disk }}%
                    </div>
                </div>
            </div>

            <!-- 3. MÉTRICAS DE AMBIENTE -->
            <div class="row g-2 mb-3">
                <div class="col-6">
                    <div class="border rounded p-2">
                        <small class="text-muted d-block">Temperatura</small>
                        {% set temp = kiosk.sensors_data_dict.temperature|default(0) %}
                        <strong class="{{ 'text-danger' if temp > 40 else 'text-warning' if temp > 35 }} temp-value">
                            {{ temp }}°C
                        </strong>
                    </div>
                </div>
                <div class="col-6">
                    <div class="border rounded p-2">
                        <small class="text-muted d-block">Humedad</small>
                        <strong class="humidity-value">{{ kiosk.sensors_data_dict.humidity|default(0) }}%</strong>
                    </div>
                </div>
            </div>

            <!-- 4. INFORMACIÓN DE RED -->
            <div class="mb-3">
                <h6 class="card-subtitle mb-2">Red</h6>
                <div class="row g-2">
                    <div class="col-4">
                        <div class="border rounded p-2">
                            <small class="text-muted d-block">Latencia</small>
                            <strong class="latency-value">{{ kiosk.sensors_data_dict.network.latency|default(0) }}ms</strong>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="border rounded p-2">
                            <small class="text-muted d-block">Velocidad</small>
                            <strong class="speed-value">↓{{ kiosk.sensors_data_dict.network.download_speed|default(0) }}Mbps</strong>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="border rounded p-2">
                            <small class="text-muted d-block">Señal</small>
                            {% set signal = kiosk.sensors_data_dict.network.signal_strength|default(0) %}
                            <strong class="{{ 'text-warning' if signal < 30 }} signal-value">
                                {{ signal }}%
                            </strong>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 5. ESTADO DE UPS -->
            {% if kiosk.sensors_data_dict.ups %}
            <div class="mb-3 ups-section">
                <h6 class="card-subtitle mb-2">UPS</h6>
                <div class="row g-2">
                    <div class="col-6">
                        <div class="border rounded p-2">
                            <small class="text-muted d-block">Batería</small>
                            {% set battery = kiosk.sensors_data_dict.ups.battery_level|default(0) %}
                            <strong class="{{ 'text-danger' if battery < 10 }} battery-value">
                                {{ battery }}%
                            </strong>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="border rounded p-2">
                            <small class="text-muted d-block">Tiempo Est.</small>
                            <strong class="runtime-value">{{ kiosk.sensors_data_dict.ups.estimated_runtime|default(0) }}min</strong>
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- 6. ALERTAS -->
            <div class="alerts-section mb-3">
                {% for error in kiosk.sensors_data_dict.errors|default([]) %}
                    <div class="alert alert-danger py-1 px-2 mb-1">{{ error }}</div>
                {% endfor %}
                {% for warning in kiosk.sensors_data_dict.warnings|default([]) %}
                    <div class="alert alert-warning py-1 px-2 mb-1">{{ warning }}</div>
                {% endfor %}
            </div>
        {% else %}
            <div class="text-center text-muted">
                <i class="fas fa-exclamation-circle fa-2x mb-2"></i>
                <p>No hay datos de sensores disponibles</p>
            </div>
        {% endif %}
    </div>

    <!-- 7. ACCIONES -->
    <div class="card-footer">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <a href="{{ url_for('kiosk.detail', kiosk_id=kiosk.id) }}" class="btn btn-primary btn-sm">
                    <i class="fas fa-eye me-1"></i>Ver Detalles
                </a>
                <a href="{{ url_for('location.kiosk_history', kiosk_id=kiosk.id) }}" class="btn btn-info btn-sm ms-1">
                    <i class="fas fa-history me-1"></i>Historial
                </a>
            </div>
            <div class="dropdown">
                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                    <i class="fas fa-cog me-1"></i>Acciones
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    {% for action in actions %}
                        <li>
                            <button class="dropdown-item action-btn" type="button" 
                                    data-action-id="{{ action.id }}"
                                    data-action-name="{{ action.name }}"
                                    data-requires-confirmation="{{ action.requires_confirmation|tojson }}">
                                <i class="{{ action.icon_class }} me-1"></i>{{ action.name }}
                            </button>
                        </li>
                    {% endfor %}
                </ul>
            </div>
        </div>
    </div>
</div>
{% endmacro %} 
            Archivo: detail.html
            --- CONTENIDO de detail.html ---
{% extends "layouts/base.html" %}

{% block title %}{{ kiosk.name }} - Detalles{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<style>
    #map {
        height: 400px;
        width: 100%;
        border-radius: 4px;
    }
    .sensor-card {
        transition: all 0.3s ease;
    }
    .sensor-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    .metric-value {
        font-size: 1.5rem;
        font-weight: bold;
    }
    .metric-label {
        color: #6c757d;
        font-size: 0.875rem;
    }
    .network-metrics {
        font-size: 0.9rem;
    }
    .history-table {
        font-size: 0.9rem;
    }
    .history-table th {
        background-color: #f8f9fa;
    }
    .progress {
        height: 10px;
    }
    .progress-bar {
        transition: width 0.3s ease;
    }
</style>
{% endblock %}

{% block content %}
<div class="container-fluid">
    <!-- Encabezado -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
            <h1 class="h3 mb-0">{{ kiosk.name }}</h1>
            <p class="text-muted mb-0">Serial: {{ kiosk.serial_number }}</p>
            </div>
            <div>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#locationHistoryModal">
                <i class="fas fa-map-marked-alt me-1"></i>Historial de Ubicaciones
                </button>
    </div>
</div>

<div class="row">
        <!-- Información General -->
        <div class="col-md-4">
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">Información General</h5>
            </div>
            <div class="card-body">
                    <div class="row g-3">
                        <div class="col-6">
                            <div class="metric-label">Estado</div>
                            <div class="metric-value">
                                <span class="badge bg-{{ 'success' if kiosk.status == 'online' else 'danger' }}">
                                    {{ kiosk.status|title }}
                        </span>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="metric-label">IP</div>
                            <div class="metric-value">{{ kiosk.ip_address or 'N/A' }}</div>
                        </div>
                        <div class="col-12">
                            <div class="metric-label">Última Conexión</div>
                            <div class="metric-value">
                                {{ kiosk.last_connection.strftime('%d/%m/%Y %H:%M:%S') if kiosk.last_connection else 'Nunca' }}
                            </div>
                        </div>
                        <div class="col-12 mt-3">
                            <div class="metric-label">Acciones</div>
                            <div class="d-flex gap-2 mt-2">
                                <button class="btn btn-sm btn-outline-primary" onclick="reiniciarKiosk({{ kiosk.id }})">
                                    <i class="fas fa-sync-alt me-1"></i>Reiniciar
                                </button>
                                <button class="btn btn-sm btn-outline-warning" onclick="apagarKiosk({{ kiosk.id }})">
                                    <i class="fas fa-power-off me-1"></i>Apagar
                                </button>
                                <button class="btn btn-sm btn-outline-info" onclick="actualizarKiosk({{ kiosk.id }})">
                                    <i class="fas fa-download me-1"></i>Actualizar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Métricas del Sistema -->
        <div class="col-md-8">
        <div class="card mb-4">
            <div class="card-header">
                    <h5 class="card-title mb-0">Métricas del Sistema</h5>
            </div>
            <div class="card-body">
                    <div class="row g-3">
                        <!-- CPU -->
                        <div class="col-md-4">
                            <div class="card sensor-card">
                                <div class="card-body">
                                    <h6 class="card-subtitle mb-2 text-muted">CPU</h6>
                                    {% set cpu = kiosk.sensors_data_dict.cpu_usage|default(0)|float %}
                                    {% set cpu_class = 'bg-danger' if cpu > 90 else 'bg-warning' if cpu > 80 else 'bg-success' %}
                                    <div class="progress mb-2">
                                        <div class="progress-bar {{ cpu_class }}" role="progressbar" style="width: {{ cpu }}%"></div>
                                    </div>
                                    <div class="metric-value">{{ "%.1f"|format(cpu) }}%</div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- RAM -->
                        <div class="col-md-4">
                            <div class="card sensor-card">
                                <div class="card-body">
                                    <h6 class="card-subtitle mb-2 text-muted">RAM</h6>
                                    {% set ram = kiosk.sensors_data_dict.ram_usage|default(0)|float %}
                                    {% set ram_class = 'bg-danger' if ram > 95 else 'bg-warning' if ram > 85 else 'bg-success' %}
                                    <div class="progress mb-2">
                                        <div class="progress-bar {{ ram_class }}" role="progressbar" style="width: {{ ram }}%"></div>
                                    </div>
                                    <div class="metric-value">{{ "%.1f"|format(ram) }}%</div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Disco -->
                        <div class="col-md-4">
                            <div class="card sensor-card">
                                <div class="card-body">
                                    <h6 class="card-subtitle mb-2 text-muted">Disco</h6>
                                    {% set disk = kiosk.sensors_data_dict.disk_usage|default(0)|float %}
                                    {% set disk_class = 'bg-danger' if disk > 95 else 'bg-warning' if disk > 85 else 'bg-success' %}
                                    <div class="progress mb-2">
                                        <div class="progress-bar {{ disk_class }}" role="progressbar" style="width: {{ disk }}%"></div>
                                    </div>
                                    <div class="metric-value">{{ "%.1f"|format(disk) }}%</div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Temperatura -->
                        <div class="col-md-6">
                            <div class="card sensor-card">
                                <div class="card-body">
                                    <h6 class="card-subtitle mb-2 text-muted">Ambiente</h6>
                                    <div class="row">
                                        <div class="col-6">
                                            {% set temp = kiosk.sensors_data_dict.temperature|default(0)|float %}
                                            <div class="metric-label">Temperatura</div>
                                            <div class="metric-value {{ 'text-danger' if temp > 40 else 'text-warning' if temp > 35 }}">
                                                {{ "%.1f"|format(temp) }}°C
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            {% set humidity = kiosk.sensors_data_dict.humidity|default(0)|float %}
                                            <div class="metric-label">Humedad</div>
                                            <div class="metric-value">{{ "%.1f"|format(humidity) }}%</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Red -->
                        <div class="col-md-6">
                            <div class="card sensor-card">
                                <div class="card-body">
                                    <h6 class="card-subtitle mb-2 text-muted">Red</h6>
                                    <div class="network-metrics">
                                        <div class="row g-2">
                                            <div class="col-6">
                                                <div class="metric-label">Latencia</div>
                                                {% if kiosk.sensors_data_dict.get('network') %}
                                                <div class="metric-value">{{ kiosk.sensors_data_dict.network.get('latency', 0) }}ms</div>
                                                {% else %}
                                                <div class="metric-value">N/A</div>
                                                {% endif %}
                                            </div>
                                            <div class="col-6">
                                                <div class="metric-label">Señal</div>
                                                {% if kiosk.sensors_data_dict.get('network') %}
                                                <div class="metric-value">{{ kiosk.sensors_data_dict.network.get('signal_strength', 0) }}%</div>
                                                {% else %}
                                                <div class="metric-value">N/A</div>
                                                {% endif %}
                                            </div>
                                            <div class="col-6">
                                                <div class="metric-label">Descarga</div>
                                                {% if kiosk.sensors_data_dict.get('network') %}
                                                <div class="metric-value">{{ kiosk.sensors_data_dict.network.get('download_speed', 0) }} Mbps ↓</div>
                                                {% else %}
                                                <div class="metric-value">N/A</div>
                                                {% endif %}
                                            </div>
                                            <div class="col-6">
                                                <div class="metric-label">Subida</div>
                                                {% if kiosk.sensors_data_dict.get('network') %}
                                                <div class="metric-value">{{ kiosk.sensors_data_dict.network.get('upload_speed', 0) }} Mbps ↑</div>
                                                {% else %}
                                                <div class="metric-value">N/A</div>
                                                {% endif %}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- UPS -->
                        {% if kiosk.sensors_data_dict.get('ups') %}
                        <div class="col-md-12">
                            <div class="card sensor-card">
                                <div class="card-body">
                                    <h6 class="card-subtitle mb-2 text-muted">UPS</h6>
                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="metric-label">Estado</div>
                                            <div class="metric-value">{{ kiosk.sensors_data_dict.ups.get('status', 'N/A') }}</div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="metric-label">Batería</div>
                                            <div class="metric-value">{{ kiosk.sensors_data_dict.ups.get('battery_level', 0) }}%</div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="metric-label">Tiempo Estimado</div>
                                            <div class="metric-value">{{ kiosk.sensors_data_dict.ups.get('estimated_runtime', 0) }} min</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        {% else %}
                        <div class="metric-value">N/A</div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Mapa y Alertas -->
    <div class="row">
        <!-- Mapa -->
        <div class="col-md-8">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">Ubicación Actual</h5>
                </div>
                <div class="card-body p-0">
                    <div id="map"></div>
                </div>
            </div>
                    </div>
                    
                    <!-- Alertas -->
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">Alertas</h5>
                </div>
                <div class="card-body">
                    {% set alerts = kiosk.calculate_alerts() %}
                    {% if alerts %}
                            {% for alert in alerts %}
                            <div class="alert alert-{{ alert.type }} py-2 px-3 mb-2">
                                    {{ alert.message }}
                                </div>
                            {% endfor %}
                    {% else %}
                        <p class="text-muted mb-0">No hay alertas activas</p>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
    
    <!-- Historial de Eventos -->
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Historial de Eventos</h5>
            </div>
        <div class="card-body">
                <div class="table-responsive">
                <table class="table table-hover history-table">
                        <thead>
                            <tr>
                                <th>Fecha</th>
                                <th>Tipo</th>
                                <th>Mensaje</th>
                            </tr>
                        </thead>
                    <tbody>
                            {% for log in logs %}
                                <tr>
                                    <td>{{ log.created_at.strftime('%d/%m/%Y %H:%M:%S') }}</td>
                                    <td>
                                    <span class="badge bg-{{ 'danger' if log.event_type == 'error' else 'info' }}">
                                            {{ log.event_type }}
                                        </span>
                                    </td>
                                    <td>{{ log.message }}</td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Historial de Ubicaciones -->
<div class="modal fade" id="locationHistoryModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Historial de Ubicaciones</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <!-- Tabla de ubicaciones -->
                    <div class="col-md-5">
                        <div class="table-responsive" style="max-height: 400px;">
                            <table class="table table-hover table-sm">
                                <thead>
                                    <tr>
                                        <th>Ubicación</th>
                                        <th>Latitud</th>
                                        <th>Longitud</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {% for location in kiosk.location_history %}
                                        <tr class="location-entry" 
                                            data-lat="{{ location.location.latitude }}"
                                            data-lng="{{ location.location.longitude }}"
                                            data-name="{{ location.name }}">
                                            <td>{{ location.name }}</td>
                                            <td>{{ "%.6f"|format(location.location.latitude) if location.location and location.location.latitude else 'N/A' }}</td>
                                            <td>{{ "%.6f"|format(location.location.longitude) if location.location and location.location.longitude else 'N/A' }}</td>
                                        </tr>
                            {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <!-- Mapa de ubicaciones -->
                    <div class="col-md-7">
                        <div id="historyMap" style="height: 400px;"></div>
                    </div>
            </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Inicializar mapa principal
    const map = L.map('map');
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    // Inicializar mapa del historial
    const historyMap = L.map('historyMap');
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(historyMap);

    // Agregar marcador de ubicación actual
    {% if kiosk.current_location %}
        const currentLocation = [{{ kiosk.current_location.latitude }}, {{ kiosk.current_location.longitude }}];
        L.marker(currentLocation)
            .bindPopup('{{ kiosk.current_location.name }}')
            .addTo(map);
        map.setView(currentLocation, 13);
    {% else %}
        map.setView([0, 0], 2);
    {% endif %}

    // Manejar el historial de ubicaciones
    const markers = [];
    const bounds = L.latLngBounds();

    document.querySelectorAll('.location-entry').forEach(entry => {
        const lat = parseFloat(entry.dataset.lat);
        const lng = parseFloat(entry.dataset.lng);
        const name = entry.dataset.name;

        if (lat && lng) {
            const marker = L.marker([lat, lng])
                .bindPopup(name)
                .addTo(historyMap);
            
            markers.push(marker);
            bounds.extend([lat, lng]);

            // Resaltar ubicación al pasar el mouse
            entry.addEventListener('mouseenter', () => {
                marker.openPopup();
                entry.style.backgroundColor = '#f8f9fa';
            });
            entry.addEventListener('mouseleave', () => {
                marker.closePopup();
                entry.style.backgroundColor = '';
            });
        }
    });

    if (markers.length > 0) {
        historyMap.fitBounds(bounds);
    } else {
        historyMap.setView([0, 0], 2);
    }

    // Actualizar mapas cuando se muestra el modal
    const locationModal = document.getElementById('locationHistoryModal');
    locationModal.addEventListener('shown.bs.modal', () => {
        historyMap.invalidateSize();
    });
});

// Funciones para acciones del kiosk
function reiniciarKiosk(kioskId) {
    if (confirm('¿Está seguro que desea reiniciar este kiosk?')) {
        $.ajax({
            url: `/kiosk/api/${kioskId}/reboot`,
            method: 'POST',
            success: function(response) {
                showNotification('success', 'Comando de reinicio enviado exitosamente');
            },
            error: function(xhr) {
                const message = xhr.responseJSON ? xhr.responseJSON.message : 'Error al enviar comando de reinicio';
                showNotification('danger', message);
            }
        });
    }
}

function apagarKiosk(kioskId) {
    if (confirm('¿Está seguro que desea apagar este kiosk?')) {
        $.ajax({
            url: `/kiosk/api/${kioskId}/shutdown`,
            method: 'POST',
            success: function(response) {
                showNotification('success', 'Comando de apagado enviado exitosamente');
            },
            error: function(xhr) {
                const message = xhr.responseJSON ? xhr.responseJSON.message : 'Error al enviar comando de apagado';
                showNotification('danger', message);
            }
        });
    }
}

function actualizarKiosk(kioskId) {
    if (confirm('¿Está seguro que desea actualizar este kiosk?')) {
        $.ajax({
            url: `/kiosk/api/${kioskId}/update`,
            method: 'POST',
            success: function(response) {
                showNotification('success', 'Comando de actualización enviado exitosamente');
            },
            error: function(xhr) {
                const message = xhr.responseJSON ? xhr.responseJSON.message : 'Error al enviar comando de actualización';
                showNotification('danger', message);
            }
        });
    }
}
</script>
{% endblock %} 
            Archivo: index.html
            --- CONTENIDO de index.html ---
{% extends "layouts/base.html" %}

{% block title %}Kioscos{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css">
<style>
    .kiosk-status {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 5px;
    }
    .status-online { background-color: #28a745; }
    .status-offline { background-color: #dc3545; }
    .status-warning { background-color: #ffc107; }
    
    .metric-badge {
        font-size: 0.8rem;
        padding: 0.2rem 0.5rem;
    }
    
    .table th {
        white-space: nowrap;
    }
    
    .action-buttons .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }
    
    .filter-card {
        transition: all 0.3s ease;
    }
    .filter-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }
</style>
{% endblock %}

{% block content %}
<div class="container-fluid">
    <!-- Encabezado -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0">Kioscos</h1>
            <p class="text-muted">Total: {{ kiosks|length }} kioscos</p>
        </div>
        <div>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addKioskModal">
                <i class="fas fa-plus me-1"></i>Agregar Kiosk
            </button>
        </div>
    </div>

    <!-- Filtros -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card filter-card">
                <div class="card-body">
                    <h6 class="card-subtitle mb-2 text-muted">Estado</h6>
                    <div class="form-check">
                        <input class="form-check-input filter-status" type="checkbox" value="online" id="filterOnline" checked>
                        <label class="form-check-label" for="filterOnline">
                            <span class="kiosk-status status-online"></span>Online
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input filter-status" type="checkbox" value="offline" id="filterOffline" checked>
                        <label class="form-check-label" for="filterOffline">
                            <span class="kiosk-status status-offline"></span>Offline
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input filter-status" type="checkbox" value="warning" id="filterWarning" checked>
                        <label class="form-check-label" for="filterWarning">
                            <span class="kiosk-status status-warning"></span>Advertencia
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card filter-card">
                <div class="card-body">
                    <h6 class="card-subtitle mb-2 text-muted">Ubicación</h6>
                    <select class="form-select" id="locationFilter">
                        <option value="">Todas las ubicaciones</option>
                        {% for location in locations %}
                            <option value="{{ location.id }}">{{ location.name }}</option>
                        {% endfor %}
                    </select>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card filter-card">
                <div class="card-body">
                    <h6 class="card-subtitle mb-2 text-muted">Alertas</h6>
                    <select class="form-select" id="alertFilter">
                        <option value="">Todos los niveles</option>
                        <option value="none">Sin alertas</option>
                        <option value="low">Bajo</option>
                        <option value="medium">Medio</option>
                        <option value="high">Alto</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card filter-card">
                <div class="card-body">
                    <h6 class="card-subtitle mb-2 text-muted">Búsqueda</h6>
                    <div class="input-group">
                        <input type="text" class="form-control" id="searchFilter" placeholder="Buscar por nombre o serial...">
                        <button class="btn btn-primary" type="button" id="searchBtn">
                            <i class="fas fa-search"></i> Buscar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabla de Kioscos -->
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover" id="kiosksTable">
                    <thead>
                        <tr>
                            <th>Estado</th>
                            <th>Nombre</th>
                            <th>Serial</th>
                            <th>Ubicación</th>
                            <th>IP</th>
                            <th>CPU</th>
                            <th>RAM</th>
                            <th>Disco</th>
                            <th>Temperatura</th>
                            <th>Última Conexión</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for kiosk in kiosks %}
                            <tr data-kiosk-id="{{ kiosk.id }}" 
                                data-status="{{ kiosk.status }}"
                                data-location="{{ kiosk.location.id if kiosk.location else '' }}"
                                data-alert-level="{{ kiosk.alert_level }}">
                                <td>
                                    <span class="kiosk-status status-{{ kiosk.status }}"></span>
                                    {{ kiosk.status|title }}
                                </td>
                                <td>
                                    <a href="{{ url_for('kiosks.detail', id=kiosk.id) }}">
                                        {{ kiosk.name }}
                                    </a>
                                </td>
                                <td>{{ kiosk.serial_number }}</td>
                                <td>
                                    {% if kiosk.location %}
                                        {{ kiosk.location.name }}
                                    {% else %}
                                        <span class="text-muted">No asignada</span>
                                    {% endif %}
                                </td>
                                <td>{{ kiosk.ip_address or 'N/A' }}</td>
                                <td>
                                    {% set cpu = kiosk.sensors_data_dict.cpu_usage|default(0)|float %}
                                    <span class="badge metric-badge bg-{{ 'danger' if cpu > 90 else 'warning' if cpu > 80 else 'success' }}">
                                        {{ "%.1f"|format(cpu) }}%
                                    </span>
                                </td>
                                <td>
                                    {% set ram = kiosk.sensors_data_dict.ram_usage|default(0)|float %}
                                    <span class="badge metric-badge bg-{{ 'danger' if ram > 95 else 'warning' if ram > 85 else 'success' }}">
                                        {{ "%.1f"|format(ram) }}%
                                    </span>
                                </td>
                                <td>
                                    {% set disk = kiosk.sensors_data_dict.disk_usage|default(0)|float %}
                                    <span class="badge metric-badge bg-{{ 'danger' if disk > 95 else 'warning' if disk > 85 else 'success' }}">
                                        {{ "%.1f"|format(disk) }}%
                                    </span>
                                </td>
                                <td>
                                    {% set temp = kiosk.sensors_data_dict.temperature|default(0)|float %}
                                    <span class="badge metric-badge bg-{{ 'danger' if temp > 40 else 'warning' if temp > 35 else 'success' }}">
                                        {{ "%.1f"|format(temp) }}°C
                                    </span>
                                </td>
                                <td>{{ kiosk.last_connection.strftime('%d/%m/%Y %H:%M:%S') if kiosk.last_connection else 'Nunca' }}</td>
                                <td>
                                    <div class="action-buttons">
                                        <a href="{{ url_for('kiosks.detail', id=kiosk.id) }}" class="btn btn-sm btn-outline-primary" title="Ver detalles">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <button type="button" 
                                                class="btn btn-sm btn-outline-secondary"
                                                data-bs-toggle="modal"
                                                data-bs-target="#assignLocationModal"
                                                data-kiosk-id="{{ kiosk.id }}"
                                                title="Asignar ubicación">
                                            <i class="fas fa-map-marker-alt"></i>
                                        </button>
                                        <button type="button"
                                                class="btn btn-sm btn-outline-danger"
                                                onclick="deleteKiosk('{{ kiosk.id }}')"
                                                title="Eliminar">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Agregar Kiosk -->
<div class="modal fade" id="addKioskModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Agregar Kiosk</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addKioskForm">
                    <div class="mb-3">
                        <label for="name" class="form-label">Nombre</label>
                        <input type="text" class="form-control" id="name" name="name" required>
                    </div>
                    <div class="mb-3">
                        <label for="serial_number" class="form-label">Número de Serie</label>
                        <input type="text" class="form-control" id="serial_number" name="serial_number" required>
                    </div>
                    <div class="mb-3">
                        <label for="location_id" class="form-label">Ubicación</label>
                        <select class="form-select" id="location_id" name="location_id">
                            <option value="">Seleccionar ubicación...</option>
                            {% for location in locations %}
                                <option value="{{ location.id }}">{{ location.name }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="saveKioskBtn">Guardar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Asignar Ubicación -->
<div class="modal fade" id="assignLocationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Asignar Ubicación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="assignLocationForm">
                    <input type="hidden" id="assign_kiosk_id" name="kiosk_id">
                    <div class="mb-3">
                        <label for="assign_location_id" class="form-label">Ubicación</label>
                        <select class="form-select" id="assign_location_id" name="location_id" required>
                            <option value="">Seleccionar ubicación...</option>
                            {% for location in locations %}
                                <option value="{{ location.id }}">{{ location.name }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="saveLocationBtn">Guardar</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
<script>
let table;

// Función para aplicar filtros
function applyFilters() {
    console.log('Aplicando filtros...');
    
    // Obtener valores de filtros
    const checkedStatuses = $('.filter-status:checked').map(function() {
        return $(this).val();
    }).get();
    
    const selectedLocation = $('#locationFilter').val();
    const selectedAlert = $('#alertFilter').val();
    const searchText = $('#searchFilter').val();

    // Mostrar indicador de carga
    $('#kiosksTable tbody').html('<tr><td colspan="11" class="text-center"><i class="fas fa-spinner fa-spin me-2"></i>Cargando...</td></tr>');
    
    // Realizar petición AJAX
    $.ajax({
        url: '/kiosk/api/filter',
        method: 'GET',
        data: {
            'status[]': checkedStatuses,
            'location': selectedLocation,
            'alert': selectedAlert,
            'search': searchText
        },
        success: function(response) {
            // Si la tabla existe, destruirla
            if (table) {
                table.destroy();
            }
            
            // Limpiar y actualizar el contenido de la tabla
            const tbody = $('#kiosksTable tbody');
            tbody.empty();
            
            if (response.kiosks.length === 0) {
                tbody.html('<tr><td colspan="11" class="text-center">No se encontraron kioscos con los filtros seleccionados</td></tr>');
            } else {
                // Agregar las filas nuevas
                response.kiosks.forEach(function(kiosk) {
                    const cpuUsage = parseFloat(kiosk.cpu_usage) || 0;
                    const ramUsage = parseFloat(kiosk.ram_usage) || 0;
                    const diskUsage = parseFloat(kiosk.disk_usage) || 0;
                    const temperature = parseFloat(kiosk.temperature) || 0;

                    const row = `
                        <tr data-kiosk-id="${kiosk.id}">
                            <td><span class="kiosk-status status-${kiosk.status}"></span>${kiosk.status.charAt(0).toUpperCase() + kiosk.status.slice(1)}</td>
                            <td><a href="${url_for('kiosks.detail', id=kiosk.id)}">${kiosk.name}</a></td>
                            <td>${kiosk.serial_number}</td>
                            <td>${kiosk.location || 'No asignada'}</td>
                            <td>${kiosk.ip_address}</td>
                            <td><span class="badge metric-badge bg-${cpuUsage > 90 ? 'danger' : cpuUsage > 80 ? 'warning' : 'success'}">${cpuUsage.toFixed(1)}%</span></td>
                            <td><span class="badge metric-badge bg-${ramUsage > 95 ? 'danger' : ramUsage > 85 ? 'warning' : 'success'}">${ramUsage.toFixed(1)}%</span></td>
                            <td><span class="badge metric-badge bg-${diskUsage > 95 ? 'danger' : diskUsage > 85 ? 'warning' : 'success'}">${diskUsage.toFixed(1)}%</span></td>
                            <td><span class="badge metric-badge bg-${temperature > 40 ? 'danger' : temperature > 35 ? 'warning' : 'success'}">${temperature.toFixed(1)}°C</span></td>
                            <td>${kiosk.last_connection}</td>
                            <td>
                                <div class="action-buttons">
                                    <a href="${url_for('kiosks.detail', id=kiosk.id)}" class="btn btn-sm btn-outline-primary" title="Ver detalles">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <button type="button" class="btn btn-sm btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#assignLocationModal" data-kiosk-id="${kiosk.id}" title="Asignar ubicación">
                                        <i class="fas fa-map-marker-alt"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteKiosk('${kiosk.id}')" title="Eliminar">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    `;
                    tbody.append(row);
                });
            }
            
            // Reinicializar DataTable después de agregar los datos
            table = $('#kiosksTable').DataTable({
                pageLength: 25,
                language: {
                    url: '//cdn.datatables.net/plug-ins/1.11.5/i18n/es-ES.json'
                },
                order: [[1, 'asc']],
                dom: 'rt<"bottom"ip>',
                processing: true
            });
            
            // Actualizar contador
            $('.total-kiosks').text(`Total: ${response.total} kioscos`);
        },
        error: function(xhr) {
            console.error('Error al filtrar:', xhr);
            showNotification('danger', 'Error al filtrar los kioscos');
            $('#kiosksTable tbody').html('<tr><td colspan="11" class="text-center text-danger">Error al cargar los datos</td></tr>');
        }
    });
}

$(document).ready(function() {
    // Inicializar DataTable
    table = $('#kiosksTable').DataTable({
        pageLength: 25,
        language: {
            url: '//cdn.datatables.net/plug-ins/1.11.5/i18n/es-ES.json'
        },
        order: [[1, 'asc']], // Ordenar por nombre por defecto
        dom: 'rt<"bottom"ip>', // Solo mostrar tabla, paginación e info
        processing: true
    });
    
    // WebSocket para actualizaciones en tiempo real
    const socket = io();
    
    socket.on('connect', function() {
        console.log('Conectado al servidor WebSocket');
    });
    
    socket.on('kiosk_update', function(data) {
        applyFilters();
    });
    
    // Eventos de filtrado
    $('#searchBtn').on('click', function(e) {
        e.preventDefault();
        console.log('Botón de búsqueda clickeado');
        applyFilters();
    });
    
    $('.filter-status').on('change', applyFilters);
    $('#locationFilter').on('change', applyFilters);
    $('#alertFilter').on('change', applyFilters);
    
    // Permitir búsqueda con Enter
    $('#searchFilter').on('keypress', function(e) {
        if (e.which === 13) {
            e.preventDefault();
            applyFilters();
        }
    });
    
    // Aplicar filtros iniciales
    applyFilters();
    
    // Función debounce para evitar muchas peticiones durante la búsqueda
    function debounce(func, wait) {
        let timeout;
        return function() {
            const context = this;
            const args = arguments;
            clearTimeout(timeout);
            timeout = setTimeout(function() {
                func.apply(context, args);
            }, wait);
        };
    }
    
    // Agregar nuevo kiosk
    $('#saveKioskBtn').click(function() {
        const formData = {
            name: $('#name').val(),
            serial_number: $('#serial_number').val(),
            location_id: $('#location_id').val() || null
        };
        
        $.ajax({
            url: '/kiosk/api/add',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(formData),
            success: function(response) {
                showNotification('success', 'Kiosk agregado exitosamente');
                $('#addKioskModal').modal('hide');
                applyFilters(); // Recargar datos en lugar de recargar página
            },
            error: function(xhr) {
                const message = xhr.responseJSON ? xhr.responseJSON.message : 'Error al agregar el kiosk';
                showNotification('danger', message);
            }
        });
    });
    
    // Asignar ubicación
    $('#assignLocationModal').on('show.bs.modal', function(event) {
        const button = $(event.relatedTarget);
        const kioskId = button.data('kiosk-id');
        $('#assign_kiosk_id').val(kioskId);
    });
    
    $('#saveLocationBtn').click(function() {
        const formData = {
            kiosk_id: $('#assign_kiosk_id').val(),
            location_id: $('#assign_location_id').val()
        };
        
        $.ajax({
            url: '/location/api/assign-kiosk',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(formData),
            success: function(response) {
                showNotification('success', 'Ubicación asignada exitosamente');
                $('#assignLocationModal').modal('hide');
                applyFilters(); // Recargar datos en lugar de recargar página
            },
            error: function(xhr) {
                const message = xhr.responseJSON ? xhr.responseJSON.message : 'Error al asignar la ubicación';
                showNotification('danger', message);
            }
        });
    });
});

function deleteKiosk(kioskId) {
    if (confirm('¿Está seguro que desea eliminar este kiosk?')) {
        // Deshabilitar el botón de eliminar
        const deleteButton = $(`button[onclick="deleteKiosk('${kioskId}')"]`);
        deleteButton.prop('disabled', true);
        
        $.ajax({
            url: `/kiosk/api/delete/${kioskId}`,
            method: 'DELETE',
            success: function(response) {
                if (response.success) {
                    showNotification('success', 'Kiosk eliminado exitosamente');
                    // Simplemente recargar los datos
                    applyFilters();
                } else {
                    showNotification('danger', 'Error al eliminar el kiosk');
                    deleteButton.prop('disabled', false);
                }
            },
            error: function(xhr) {
                const message = xhr.responseJSON ? xhr.responseJSON.message : 'Error al eliminar el kiosk';
                showNotification('danger', message);
                deleteButton.prop('disabled', false);
            }
        });
    }
}

function showNotification(type, message) {
    const alert = $(`<div class="alert alert-${type} alert-dismissible fade show" role="alert">
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>`);
    $('.container-fluid').prepend(alert);
    
    setTimeout(() => {
        alert.alert('close');
    }, 5000);
}

// URLs base para los endpoints
const KIOSK_URL_BASE = "{{ url_for('kiosks.index') }}".replace(/\/$/, '');

function updateKioskRow(kiosk) {
    const cpuUsage = parseFloat(kiosk.cpu_usage) || 0;
    const ramUsage = parseFloat(kiosk.ram_usage) || 0;
    const diskUsage = parseFloat(kiosk.disk_usage) || 0;
    const temperature = parseFloat(kiosk.temperature) || 0;

    const row = `
        <tr data-kiosk-id="${kiosk.id}">
            <td><span class="kiosk-status status-${kiosk.status}"></span>${kiosk.status.charAt(0).toUpperCase() + kiosk.status.slice(1)}</td>
            <td><a href="${KIOSK_URL_BASE}/${kiosk.id}">${kiosk.name}</a></td>
            <td>${kiosk.serial_number}</td>
            <td>${kiosk.location || 'No asignada'}</td>
            <td>${kiosk.ip_address}</td>
            <td><span class="badge metric-badge bg-${cpuUsage > 90 ? 'danger' : cpuUsage > 80 ? 'warning' : 'success'}">${cpuUsage.toFixed(1)}%</span></td>
            <td><span class="badge metric-badge bg-${ramUsage > 95 ? 'danger' : ramUsage > 85 ? 'warning' : 'success'}">${ramUsage.toFixed(1)}%</span></td>
            <td><span class="badge metric-badge bg-${diskUsage > 95 ? 'danger' : diskUsage > 85 ? 'warning' : 'success'}">${diskUsage.toFixed(1)}%</span></td>
            <td><span class="badge metric-badge bg-${temperature > 40 ? 'danger' : temperature > 35 ? 'warning' : 'success'}">${temperature.toFixed(1)}°C</span></td>
            <td>${kiosk.last_connection}</td>
            <td>
                <div class="action-buttons">
                    <a href="${KIOSK_URL_BASE}/${kiosk.id}" class="btn btn-sm btn-outline-primary" title="Ver detalles">
                        <i class="fas fa-eye"></i>
                    </a>
                    <button type="button" class="btn btn-sm btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#assignLocationModal" data-kiosk-id="${kiosk.id}" title="Asignar ubicación">
                        <i class="fas fa-map-marker-alt"></i>
                    </button>
                </div>
            </td>
        </tr>`;
    return row;
}
</script>
{% endblock %} 
            Archivo: logs.html
            --- CONTENIDO de logs.html ---
{% extends "layouts/base.html" %}

{% block title %}Historial de Eventos{% endblock %}

{% block header_title %}Historial de Eventos{% endblock %}

{% block content %}
<div class="container-fluid">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Eventos Recientes</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Fecha</th>
                            <th>Kiosk</th>
                            <th>Tipo</th>
                            <th>Mensaje</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for log in logs %}
                        <tr>
                            <td>{{ log.created_at|datetime }}</td>
                            <td>{{ log.kiosk.name if log.kiosk else 'Sistema' }}</td>
                            <td>
                                <span class="badge bg-{{ log.event_type }}">
                                    {{ log.event_type_display }}
                                </span>
                            </td>
                            <td>{{ log.message }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
{% endblock %} 
            Archivo: settings.html
            --- CONTENIDO de settings.html ---
{% extends "layouts/base.html" %}

{% block title %}Configuración del Sistema{% endblock %}

{% block content %}
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">Configuración del Sistema</h1>
        </div>
    </div>

    <div class="row">
        <!-- Configuración General -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Configuración General</h5>
                </div>
                <div class="card-body">
                    <form id="generalSettingsForm">
                        <div class="mb-3">
                            <label for="systemName" class="form-label">Nombre del Sistema</label>
                            <input type="text" class="form-control" id="systemName" value="{{ settings.system_name }}">
                        </div>
                        <div class="mb-3">
                            <label for="refreshInterval" class="form-label">Intervalo de Actualización (segundos)</label>
                            <input type="number" class="form-control" id="refreshInterval" value="{{ settings.refresh_interval }}">
                        </div>
                        <div class="mb-3">
                            <label for="maxLogs" class="form-label">Máximo de Logs a Mostrar</label>
                            <input type="number" class="form-control" id="maxLogs" value="{{ settings.max_logs }}">
                        </div>
                        <button type="submit" class="btn btn-primary">Guardar Cambios</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Configuración de Alertas -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Configuración de Alertas</h5>
                </div>
                <div class="card-body">
                    <form id="alertSettingsForm">
                        <div class="mb-3">
                            <label class="form-label">CPU</label>
                            <div class="row g-2">
                                <div class="col-6">
                                    <div class="input-group">
                                        <span class="input-group-text">Advertencia</span>
                                        <input type="number" class="form-control" id="cpuWarning" value="{{ settings.cpu_warning }}">
                                        <span class="input-group-text">%</span>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="input-group">
                                        <span class="input-group-text">Crítico</span>
                                        <input type="number" class="form-control" id="cpuCritical" value="{{ settings.cpu_critical }}">
                                        <span class="input-group-text">%</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">RAM</label>
                            <div class="row g-2">
                                <div class="col-6">
                                    <div class="input-group">
                                        <span class="input-group-text">Advertencia</span>
                                        <input type="number" class="form-control" id="ramWarning" value="{{ settings.ram_warning }}">
                                        <span class="input-group-text">%</span>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="input-group">
                                        <span class="input-group-text">Crítico</span>
                                        <input type="number" class="form-control" id="ramCritical" value="{{ settings.ram_critical }}">
                                        <span class="input-group-text">%</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Disco</label>
                            <div class="row g-2">
                                <div class="col-6">
                                    <div class="input-group">
                                        <span class="input-group-text">Advertencia</span>
                                        <input type="number" class="form-control" id="diskWarning" value="{{ settings.disk_warning }}">
                                        <span class="input-group-text">%</span>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="input-group">
                                        <span class="input-group-text">Crítico</span>
                                        <input type="number" class="form-control" id="diskCritical" value="{{ settings.disk_critical }}">
                                        <span class="input-group-text">%</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">Guardar Cambios</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Acciones del Sistema -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">Acciones del Sistema</h5>
                        <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addActionModal">
                            <i class="fas fa-plus me-1"></i>Nueva Acción
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Nombre</th>
                                    <th>Comando</th>
                                    <th>Estado</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for action in actions %}
                                <tr>
                                    <td>{{ action.name }}</td>
                                    <td><code>{{ action.command }}</code></td>
                                    <td>
                                        <span class="badge bg-{{ 'success' if action.is_active else 'danger' }}">
                                            {{ 'Activo' if action.is_active else 'Inactivo' }}
                                        </span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary me-1" onclick="editAction({{ action.id }})">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteAction({{ action.id }})">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Estados del Sistema -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">Estados del Sistema</h5>
                        <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addStateModal">
                            <i class="fas fa-plus me-1"></i>Nuevo Estado
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Nombre</th>
                                    <th>Color</th>
                                    <th>Descripción</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for state in states %}
                                <tr>
                                    <td>{{ state.name }}</td>
                                    <td>
                                        <span class="badge" style="background-color: {{ state.color }}">
                                            {{ state.color }}
                                        </span>
                                    </td>
                                    <td>{{ state.description }}</td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary me-1" onclick="editState({{ state.id }})">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteState({{ state.id }})">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Agregar/Editar Acción -->
<div class="modal fade" id="addActionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Nueva Acción</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="actionForm">
                    <div class="mb-3">
                        <label for="actionName" class="form-label">Nombre</label>
                        <input type="text" class="form-control" id="actionName" required>
                    </div>
                    <div class="mb-3">
                        <label for="actionCommand" class="form-label">Comando</label>
                        <input type="text" class="form-control" id="actionCommand" required>
                    </div>
                    <div class="mb-3">
                        <label for="actionIcon" class="form-label">Ícono</label>
                        <input type="text" class="form-control" id="actionIcon" value="fas fa-cog">
                    </div>
                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="actionConfirmation">
                        <label class="form-check-label" for="actionConfirmation">Requiere Confirmación</label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="saveAction()">Guardar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Agregar/Editar Estado -->
<div class="modal fade" id="addStateModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Nuevo Estado</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="stateForm">
                    <div class="mb-3">
                        <label for="stateName" class="form-label">Nombre</label>
                        <input type="text" class="form-control" id="stateName" required>
                    </div>
                    <div class="mb-3">
                        <label for="stateColor" class="form-label">Color</label>
                        <input type="color" class="form-control" id="stateColor" required>
                    </div>
                    <div class="mb-3">
                        <label for="stateDescription" class="form-label">Descripción</label>
                        <textarea class="form-control" id="stateDescription" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="saveState()">Guardar</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
// Funciones para manejar las acciones
function editAction(id) {
    $.get(`/kiosk/api/action/${id}`, function(data) {
        $('#actionName').val(data.name);
        $('#actionCommand').val(data.command);
        $('#actionIcon').val(data.icon);
        $('#actionConfirmation').prop('checked', data.requires_confirmation);
        $('#addActionModal').modal('show');
    });
}

function deleteAction(id) {
    if (confirm('¿Está seguro de que desea eliminar esta acción?')) {
        $.ajax({
            url: `/kiosk/api/action/${id}`,
            method: 'DELETE',
            success: function() {
                showNotification('success', 'Acción eliminada exitosamente');
                location.reload();
            },
            error: function() {
                showNotification('danger', 'Error al eliminar la acción');
            }
        });
    }
}

function saveAction() {
    const data = {
        name: $('#actionName').val(),
        command: $('#actionCommand').val(),
        icon: $('#actionIcon').val(),
        requires_confirmation: $('#actionConfirmation').is(':checked')
    };

    $.ajax({
        url: '/kiosk/api/action',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function() {
            showNotification('success', 'Acción guardada exitosamente');
            $('#addActionModal').modal('hide');
            location.reload();
        },
        error: function() {
            showNotification('danger', 'Error al guardar la acción');
        }
    });
}

// Funciones para manejar los estados
function editState(id) {
    $.get(`/kiosk/api/state/${id}`, function(data) {
        $('#stateName').val(data.name);
        $('#stateColor').val(data.color);
        $('#stateDescription').val(data.description);
        $('#addStateModal').modal('show');
    });
}

function deleteState(id) {
    if (confirm('¿Está seguro de que desea eliminar este estado?')) {
        $.ajax({
            url: `/kiosk/api/state/${id}`,
            method: 'DELETE',
            success: function() {
                showNotification('success', 'Estado eliminado exitosamente');
                location.reload();
            },
            error: function() {
                showNotification('danger', 'Error al eliminar el estado');
            }
        });
    }
}

function saveState() {
    const data = {
        name: $('#stateName').val(),
        color: $('#stateColor').val(),
        description: $('#stateDescription').val()
    };

    $.ajax({
        url: '/kiosk/api/state',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function() {
            showNotification('success', 'Estado guardado exitosamente');
            $('#addStateModal').modal('hide');
            location.reload();
        },
        error: function() {
            showNotification('danger', 'Error al guardar el estado');
        }
    });
}

// Manejar envío de formularios
document.getElementById('generalSettingsForm').addEventListener('submit', function(e) {
    e.preventDefault();
    const data = {
        system_name: $('#systemName').val(),
        refresh_interval: $('#refreshInterval').val(),
        max_logs: $('#maxLogs').val()
    };

    $.ajax({
        url: '/kiosk/api/settings/general',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function() {
            showNotification('success', 'Configuración guardada exitosamente');
        },
        error: function() {
            showNotification('danger', 'Error al guardar la configuración');
        }
    });
});

document.getElementById('alertSettingsForm').addEventListener('submit', function(e) {
    e.preventDefault();
    const data = {
        cpu_warning: $('#cpuWarning').val(),
        cpu_critical: $('#cpuCritical').val(),
        ram_warning: $('#ramWarning').val(),
        ram_critical: $('#ramCritical').val(),
        disk_warning: $('#diskWarning').val(),
        disk_critical: $('#diskCritical').val()
    };

    $.ajax({
        url: '/kiosk/api/settings/alerts',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function() {
            showNotification('success', 'Configuración de alertas guardada exitosamente');
        },
        error: function() {
            showNotification('danger', 'Error al guardar la configuración de alertas');
        }
    });
});
</script>
{% endblock %} 
        Carpeta: layouts
            Archivo: base.html
            --- CONTENIDO de base.html ---
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}{% endblock %} - Admin Kiosk</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
    
    <!-- Leaflet Geocoder CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
    
    {% block extra_css %}{% endblock %}
</head>
<body>
    <!-- Sidebar -->
    <nav class="sidebar">
        <div class="sidebar-header">
            <a href="{{ url_for('main.index') }}" class="brand-link">
                <i class="fas fa-desktop me-2"></i>Admin Kiosk
            </a>
        </div>
        <div class="sidebar-nav">
            <div class="nav-item">
                <a href="{{ url_for('main.index') }}" class="nav-link {{ 'active' if request.endpoint == 'main.index' }}">
                    <i class="fas fa-th-large"></i>Dashboard
                </a>
            </div>
            <div class="nav-item">
                <a href="{{ url_for('kiosks.index') }}" class="nav-link {{ 'active' if request.endpoint == 'kiosks.index' }}">
                    <i class="fas fa-desktop"></i>Kiosks
                </a>
            </div>
            <div class="nav-item">
                <a href="{{ url_for('location.index') }}" class="nav-link {{ 'active' if request.endpoint == 'location.index' }}">
                    <i class="fas fa-map-marker-alt"></i>Ubicaciones
                </a>
            </div>
            <div class="nav-item">
                <a href="{{ url_for('kiosks.logs') }}" class="nav-link {{ 'active' if request.endpoint == 'kiosks.logs' }}">
                    <i class="fas fa-history"></i>Historial
                </a>
            </div>
            <div class="nav-item">
                <a href="{{ url_for('kiosks.settings') }}" class="nav-link {{ 'active' if request.endpoint == 'kiosks.settings' }}">
                    <i class="fas fa-cog"></i>Configuración
                </a>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="main-wrapper">
        <!-- Header -->
        <header class="main-header">
            <button class="toggle-sidebar" type="button">
                <i class="fas fa-bars"></i>
            </button>
            <h1 class="header-title">{% block header_title %}{% endblock %}</h1>
            <div class="header-actions">
                {% block header_actions %}{% endblock %}
            </div>
        </header>

        <!-- Content -->
        <main class="main-content">
            {% with messages = get_flashed_messages(with_categories=true) %}
                {% if messages %}
                    {% for category, message in messages %}
                        <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
                            {{ message }}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    {% endfor %}
                {% endif %}
            {% endwith %}
            {% block content %}{% endblock %}
        </main>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    
    <!-- Custom JS -->
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
    
    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    
    <!-- Leaflet Geocoder JS -->
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    
    {% block extra_js %}{% endblock %}
</body>
</html> 
        Carpeta: location
            Archivo: create.html
            --- CONTENIDO de create.html ---
{% extends "layouts/base.html" %}

{% block title %}Crear Ubicación{% endblock %}

{% block content %}
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Crear Ubicación</h3>
                </div>
                <div class="card-body">
                    <form id="locationForm" method="POST">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="name" class="form-label">Nombre</label>
                                    <input type="text" class="form-control" id="name" name="name" required>
                                </div>
                                <div class="mb-3">
                                    <label for="address" class="form-label">Dirección</label>
                                    <div class="input-group">
                                        <input type="text" class="form-control" id="address" name="address" required>
                                        <button type="button" class="btn btn-outline-secondary" onclick="searchAddress()">
                                            <i class="fas fa-search"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="description" class="form-label">Descripción</label>
                                    <textarea class="form-control" id="description" name="description" rows="3"></textarea>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="latitude" class="form-label">Latitud</label>
                                            <input type="number" step="any" class="form-control" id="latitude" name="latitude" required readonly>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="longitude" class="form-label">Longitud</label>
                                            <input type="number" step="any" class="form-control" id="longitude" name="longitude" required readonly>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div id="map" style="height: 400px;"></div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-12">
                                <button type="submit" class="btn btn-success">Guardar</button>
                                <a href="{{ url_for('location.index') }}" class="btn btn-secondary">Cancelar</a>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
let map;
let marker;
const geocoder = L.Control.Geocoder.nominatim();

function initMap() {
    // Coordenadas iniciales (centro de la ciudad)
    const initialLocation = [-34.6037, -58.3816];
    
    // Inicializar mapa
    map = L.map('map').setView(initialLocation, 13);
    
    // Agregar capa de OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);
    
    // Agregar marcador inicial
    marker = L.marker(initialLocation, {
        draggable: true
    }).addTo(map);
    
    // Actualizar coordenadas cuando se mueve el marcador
    marker.on('dragend', function(e) {
        const position = marker.getLatLng();
        updateCoordinates(position.lat, position.lng);
        
        // Obtener dirección desde coordenadas
        geocoder.reverse(position, map.options.crs.scale(map.getZoom()), results => {
            if (results && results.length > 0) {
                document.getElementById('address').value = results[0].name;
            }
        });
    });
    
    // Permitir hacer clic en el mapa para mover el marcador
    map.on('click', function(e) {
        marker.setLatLng(e.latlng);
        updateCoordinates(e.latlng.lat, e.latlng.lng);
        
        // Obtener dirección desde coordenadas
        geocoder.reverse(e.latlng, map.options.crs.scale(map.getZoom()), results => {
            if (results && results.length > 0) {
                document.getElementById('address').value = results[0].name;
            }
        });
    });
}

function updateCoordinates(lat, lng) {
    document.getElementById('latitude').value = lat.toFixed(6);
    document.getElementById('longitude').value = lng.toFixed(6);
}

function searchAddress() {
    const address = document.getElementById('address').value;
    if (!address) return;
    
    geocoder.geocode(address, results => {
        if (results && results.length > 0) {
            const result = results[0];
            const latlng = result.center;
            
            map.setView(latlng, 16);
            marker.setLatLng(latlng);
            updateCoordinates(latlng.lat, latlng.lng);
        }
    });
}

// Inicializar mapa cuando se carga la página
document.addEventListener('DOMContentLoaded', initMap);
</script>
{% endblock %} 
            Archivo: edit.html
            --- CONTENIDO de edit.html ---
{% extends "layouts/base.html" %}

{% block title %}Editar Ubicación{% endblock %}

{% block content %}
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Editar Ubicación</h3>
                </div>
                <div class="card-body">
                    <form id="locationForm" method="POST">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="name" class="form-label">Nombre</label>
                                    <input type="text" class="form-control" id="name" name="name" required value="{{ location.name }}">
                                </div>
                                <div class="mb-3">
                                    <label for="address" class="form-label">Dirección</label>
                                    <div class="input-group">
                                        <input type="text" class="form-control" id="address" name="address" required value="{{ location.address }}">
                                        <button type="button" class="btn btn-outline-secondary" onclick="searchAddress()">
                                            <i class="fas fa-search"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="description" class="form-label">Descripción</label>
                                    <textarea class="form-control" id="description" name="description" rows="3">{{ location.description }}</textarea>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="latitude" class="form-label">Latitud</label>
                                            <input type="number" step="any" class="form-control" id="latitude" name="latitude" required readonly value="{{ location.latitude }}">
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="longitude" class="form-label">Longitud</label>
                                            <input type="number" step="any" class="form-control" id="longitude" name="longitude" required readonly value="{{ location.longitude }}">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div id="map" style="height: 400px;"></div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-12">
                                <button type="submit" class="btn btn-success">Guardar Cambios</button>
                                <a href="{{ url_for('location.index') }}" class="btn btn-secondary">Cancelar</a>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
let map;
let marker;
const geocoder = L.Control.Geocoder.nominatim();

function initMap() {
    // Coordenadas de la ubicación actual
    const currentLocation = [{{ location.latitude }}, {{ location.longitude }}];
    
    // Inicializar mapa
    map = L.map('map').setView(currentLocation, 13);
    
    // Agregar capa de OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);
    
    // Agregar marcador inicial
    marker = L.marker(currentLocation, {
        draggable: true
    }).addTo(map);
    
    // Actualizar coordenadas cuando se mueve el marcador
    marker.on('dragend', function(e) {
        const position = marker.getLatLng();
        updateCoordinates(position.lat, position.lng);
        
        // Obtener dirección desde coordenadas
        geocoder.reverse(position, map.options.crs.scale(map.getZoom()), results => {
            if (results && results.length > 0) {
                document.getElementById('address').value = results[0].name;
            }
        });
    });
    
    // Permitir hacer clic en el mapa para mover el marcador
    map.on('click', function(e) {
        marker.setLatLng(e.latlng);
        updateCoordinates(e.latlng.lat, e.latlng.lng);
        
        // Obtener dirección desde coordenadas
        geocoder.reverse(e.latlng, map.options.crs.scale(map.getZoom()), results => {
            if (results && results.length > 0) {
                document.getElementById('address').value = results[0].name;
            }
        });
    });
}

function updateCoordinates(lat, lng) {
    document.getElementById('latitude').value = lat.toFixed(6);
    document.getElementById('longitude').value = lng.toFixed(6);
}

function searchAddress() {
    const address = document.getElementById('address').value;
    if (!address) return;
    
    geocoder.geocode(address, results => {
        if (results && results.length > 0) {
            const result = results[0];
            const latlng = result.center;
            
            map.setView(latlng, 16);
            marker.setLatLng(latlng);
            updateCoordinates(latlng.lat, latlng.lng);
        }
    });
}

// Inicializar mapa cuando se carga la página
document.addEventListener('DOMContentLoaded', initMap);
</script>
{% endblock %} 
            Archivo: index.html
            --- CONTENIDO de index.html ---
{% extends "layouts/base.html" %}

{% block title %}Ubicaciones{% endblock %}

{% block header_title %}Ubicaciones{% endblock %}

{% block header_actions %}
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addLocationModal">
    <i class="fas fa-plus me-1"></i>Agregar Ubicación
</button>
{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css">
<link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css">
<style>
    #map {
        height: 400px;
        width: 100%;
        border-radius: 4px;
    }
    
    .location-card {
        transition: all 0.3s ease;
    }
    .location-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .kiosk-count {
        font-size: 0.875rem;
        color: #6c757d;
    }
    
    .location-actions .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }
    
    .table th {
        white-space: nowrap;
    }
</style>
{% endblock %}

{% block content %}
<div class="row mb-4">
    <!-- Mapa -->
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Mapa de Ubicaciones</h5>
            </div>
            <div class="card-body p-0">
                <div id="map"></div>
            </div>
        </div>
    </div>
    
    <!-- Estadísticas -->
    <div class="col-md-4">
        <div class="row g-3">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h6 class="card-subtitle mb-2 text-muted">Total Ubicaciones</h6>
                        <h3 class="mb-0">{{ locations|length }}</h3>
                    </div>
                </div>
            </div>
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h6 class="card-subtitle mb-2 text-muted">Kioscos Asignados</h6>
                        <h3 class="mb-0">{{ total_kiosks }}</h3>
                    </div>
                </div>
            </div>
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h6 class="card-subtitle mb-2 text-muted">Promedio Kioscos/Ubicación</h6>
                        <h3 class="mb-0">{{ "%.1f"|format(avg_kiosks_per_location) }}</h3>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Tabla de Ubicaciones -->
<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-hover" id="locationsTable">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Dirección</th>
                        <th>Latitud</th>
                        <th>Longitud</th>
                        <th>Kioscos</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    {% for location in locations %}
                        <tr data-location-id="{{ location.id }}">
                            <td>{{ location.name }}</td>
                            <td>{{ location.address }}</td>
                            <td>{{ "%.6f"|format(location.latitude) if location.latitude is not none else 'N/A' }}</td>
                            <td>{{ "%.6f"|format(location.longitude) if location.longitude is not none else 'N/A' }}</td>
                            <td>
                                <span class="badge bg-primary">{{ location.kiosks|length }}</span>
                                {% if location.kiosks %}
                                    <button type="button" 
                                            class="btn btn-link btn-sm p-0 ms-1"
                                            data-bs-toggle="modal"
                                            data-bs-target="#viewKiosksModal"
                                            data-location-id="{{ location.id }}"
                                            data-location-name="{{ location.name }}">
                                        Ver
                                    </button>
                                {% endif %}
                            </td>
                            <td>
                                <div class="location-actions">
                                    <a href="{{ url_for('location.edit', id=location.id) }}"
                                       class="btn btn-sm btn-outline-primary"
                                       title="Editar">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <button type="button"
                                            class="btn btn-sm btn-outline-danger"
                                            onclick="deleteLocation('{{ location.id }}')"
                                            title="Eliminar">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal para Agregar Ubicación -->
<div class="modal fade" id="addLocationModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Agregar Ubicación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="addLocationForm">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="name" class="form-label">Nombre</label>
                                <input type="text" class="form-control" id="name" name="name" required>
                            </div>
                            <div class="mb-3">
                                <label for="address" class="form-label">Dirección</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="address" name="address" required>
                                    <button type="button" class="btn btn-outline-secondary" onclick="searchAddress()">
                                        <i class="fas fa-search"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-primary" onclick="openSearchMap()">
                                        <i class="fas fa-map-marker-alt"></i> Buscar en Mapa
                                    </button>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="description" class="form-label">Descripción</label>
                                <textarea class="form-control" id="description" name="description" rows="3"></textarea>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="latitude" class="form-label">Latitud</label>
                                        <input type="number" step="any" class="form-control" id="latitude" name="latitude" required readonly>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="longitude" class="form-label">Longitud</label>
                                        <input type="number" step="any" class="form-control" id="longitude" name="longitude" required readonly>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div id="locationMap" style="height: 400px;"></div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Guardar</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal para Editar Ubicación -->
<div class="modal fade" id="editLocationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Editar Ubicación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editLocationForm">
                    <input type="hidden" id="edit_location_id">
                    <div class="mb-3">
                        <label for="edit_name" class="form-label">Nombre</label>
                        <input type="text" class="form-control" id="edit_name" name="name" required>
                    </div>
                    <div class="mb-3">
                        <label for="edit_address" class="form-label">Dirección</label>
                        <input type="text" class="form-control" id="edit_address" name="address" required>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="edit_latitude" class="form-label">Latitud</label>
                                <input type="number" class="form-control" id="edit_latitude" name="latitude" step="any" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="edit_longitude" class="form-label">Longitud</label>
                                <input type="number" class="form-control" id="edit_longitude" name="longitude" step="any" required>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="updateLocationBtn">Guardar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Ver Kioscos -->
<div class="modal fade" id="viewKiosksModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Kioscos en <span id="locationName"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table class="table table-hover" id="kiosksTable">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Serial</th>
                                <th>Estado</th>
                                <th>Última Conexión</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="kiosksTableBody">
                            <!-- Los kioscos se cargarán dinámicamente -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Búsqueda en Mapa -->
<div class="modal fade" id="searchMapModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Buscar Ubicación en Mapa</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col">
                        <div class="input-group">
                            <input type="text" class="form-control" id="searchMapAddress" placeholder="Buscar dirección...">
                            <button class="btn btn-outline-secondary" type="button" onclick="searchMapAddress()">
                                <i class="fas fa-search"></i> Buscar
                            </button>
                        </div>
                    </div>
                </div>
                <div id="searchMap" style="height: 600px;"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="useSelectedLocation()">Usar Ubicación</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
<script>
let map;
let marker;
let searchMap;
let searchMarker;
const geocoder = L.Control.Geocoder.nominatim();

// Inicializar mapa principal
function initMainMap() {
    const mainMap = L.map('map');
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(mainMap);
    
    // Agregar marcadores para cada ubicación
    const markers = [];
    const bounds = L.latLngBounds();
    
    {% for location in locations %}
        markers.push(L.marker([{{ location.latitude }}, {{ location.longitude }}])
            .bindPopup(`
                <strong>{{ location.name }}</strong><br>
                {{ location.address }}<br>
                <small class="text-muted">{{ location.kiosks|length }} kioscos</small>
            `)
            .addTo(mainMap));
        
        bounds.extend([{{ location.latitude }}, {{ location.longitude }}]);
    {% endfor %}
    
    if (markers.length > 0) {
        mainMap.fitBounds(bounds);
    } else {
        mainMap.setView([0, 0], 2);
    }
}

function initMap() {
    // Coordenadas iniciales (centro de la ciudad)
    const initialLocation = [-34.6037, -58.3816];
    
    // Inicializar mapa
    map = L.map('locationMap').setView(initialLocation, 13);
    
    // Agregar capa de OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);
    
    // Agregar marcador inicial
    marker = L.marker(initialLocation, {
        draggable: true
    }).addTo(map);
    
    // Actualizar coordenadas cuando se mueve el marcador
    marker.on('dragend', function(e) {
        const position = marker.getLatLng();
        updateCoordinates(position.lat, position.lng);
        
        // Obtener dirección desde coordenadas
        geocoder.reverse(position, map.options.crs.scale(map.getZoom()), results => {
            if (results && results.length > 0) {
                document.getElementById('address').value = results[0].name;
            }
        });
    });
    
    // Permitir hacer clic en el mapa para mover el marcador
    map.on('click', function(e) {
        marker.setLatLng(e.latlng);
        updateCoordinates(e.latlng.lat, e.latlng.lng);
        
        // Obtener dirección desde coordenadas
        geocoder.reverse(e.latlng, map.options.crs.scale(map.getZoom()), results => {
            if (results && results.length > 0) {
                document.getElementById('address').value = results[0].name;
            }
        });
    });
}

function updateCoordinates(lat, lng) {
    document.getElementById('latitude').value = lat.toFixed(6);
    document.getElementById('longitude').value = lng.toFixed(6);
}

function searchAddress() {
    const address = document.getElementById('address').value;
    if (!address) return;
    
    geocoder.geocode(address, results => {
        if (results && results.length > 0) {
            const result = results[0];
            const latlng = result.center;
            
            map.setView(latlng, 16);
            marker.setLatLng(latlng);
            updateCoordinates(latlng.lat, latlng.lng);
        }
    });
}

// Inicializar mapa cuando se abre el modal
document.getElementById('addLocationModal').addEventListener('shown.bs.modal', function () {
    if (!map) {
        initMap();
    }
    // Forzar redimensionamiento del mapa
    map.invalidateSize();
});

// Inicializar mapa principal cuando se carga la página
document.addEventListener('DOMContentLoaded', function() {
    initMainMap();
    
    // Inicializar DataTable
    $('#locationsTable').DataTable({
        language: {
            url: '//cdn.datatables.net/plug-ins/1.10.24/i18n/Spanish.json'
        },
        pageLength: 25
    });
    
    // Manejar envío del formulario
    $('#addLocationForm').on('submit', function(e) {
        e.preventDefault();
        const formData = {
            name: $('#name').val(),
            address: $('#address').val(),
            latitude: parseFloat($('#latitude').val()),
            longitude: parseFloat($('#longitude').val()),
            description: $('#description').val()
        };

        if (!formData.name || !formData.address || isNaN(formData.latitude) || isNaN(formData.longitude)) {
            alert('Por favor complete todos los campos correctamente');
            return;
        }

        $.ajax({
            url: "{{ url_for('location.api_create') }}",
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(formData),
            success: function(response) {
                if (response.success) {
                    $('#addLocationModal').modal('hide');
                    window.location.reload();
                } else {
                    alert(response.error || 'Error al guardar la ubicación');
                }
            },
            error: function(xhr) {
                alert('Error al guardar la ubicación: ' + (xhr.responseJSON?.error || 'Error desconocido'));
            }
        });
    });
});

function deleteLocation(locationId) {
    if (confirm('¿Está seguro que desea eliminar esta ubicación?')) {
        $.ajax({
            url: `/location/api/delete/${locationId}`,
            method: 'DELETE',
            success: function(response) {
                showNotification('success', 'Ubicación eliminada exitosamente');
                location.reload();
            },
            error: function(xhr) {
                const message = xhr.responseJSON ? xhr.responseJSON.message : 'Error al eliminar la ubicación';
                showNotification('danger', message);
            }
        });
    }
}

function showNotification(type, message) {
    const alert = $(`<div class="alert alert-${type} alert-dismissible fade show" role="alert">
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>`);
    $('.main-content').prepend(alert);
    
    setTimeout(() => {
        alert.alert('close');
    }, 5000);
}

function openSearchMap() {
    const searchMapModal = new bootstrap.Modal(document.getElementById('searchMapModal'));
    searchMapModal.show();
    
    // Inicializar mapa de búsqueda si no existe
    if (!searchMap) {
        searchMap = L.map('searchMap').setView([-34.6037, -58.3816], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(searchMap);
        
        // Agregar marcador arrastrable
        searchMarker = L.marker([-34.6037, -58.3816], {
            draggable: true
        }).addTo(searchMap);
        
        // Actualizar coordenadas al arrastrar
        searchMarker.on('dragend', function(e) {
            const position = searchMarker.getLatLng();
            updateSearchCoordinates(position.lat, position.lng);
        });
        
        // Permitir hacer clic en el mapa
        searchMap.on('click', function(e) {
            searchMarker.setLatLng(e.latlng);
            updateSearchCoordinates(e.latlng.lat, e.latlng.lng);
        });
    }
    
    // Forzar redimensionamiento
    setTimeout(() => {
        searchMap.invalidateSize();
    }, 250);
}

function searchMapAddress() {
    const address = document.getElementById('searchMapAddress').value;
    if (!address) return;
    
    geocoder.geocode(address, results => {
        if (results && results.length > 0) {
            const result = results[0];
            const latlng = result.center;
            
            searchMap.setView(latlng, 16);
            searchMarker.setLatLng(latlng);
            updateSearchCoordinates(latlng.lat, latlng.lng);
        }
    });
}

function updateSearchCoordinates(lat, lng) {
    // Obtener dirección desde coordenadas
    geocoder.reverse([lat, lng], searchMap.options.crs.scale(searchMap.getZoom()), results => {
        if (results && results.length > 0) {
            document.getElementById('searchMapAddress').value = results[0].name;
        }
    });
}

function useSelectedLocation() {
    const position = searchMarker.getLatLng();
    const address = document.getElementById('searchMapAddress').value;
    
    // Actualizar formulario principal
    document.getElementById('address').value = address;
    document.getElementById('latitude').value = position.lat.toFixed(6);
    document.getElementById('longitude').value = position.lng.toFixed(6);
    
    // Actualizar mapa pequeño
    if (map && marker) {
        map.setView(position, 16);
        marker.setLatLng(position);
    }
    
    // Cerrar modal
    bootstrap.Modal.getInstance(document.getElementById('searchMapModal')).hide();
}
</script>
{% endblock %} 
            Archivo: kiosk_history.html
            --- CONTENIDO de kiosk_history.html ---
{% extends "layouts/base.html" %}

{% block title %}Historial de Ubicaciones - {{ kiosk.name }}{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<style>
    #map {
        height: 500px;
        width: 100%;
        border-radius: 4px;
    }
</style>
{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <a href="{{ url_for('kiosk.detail', kiosk_id=kiosk.id) }}" class="btn btn-outline-primary me-2">
                    <i class="fas fa-arrow-left me-1"></i>Volver
                </a>
                <h1 class="d-inline-block mb-0">Historial de Ubicaciones - {{ kiosk.name }}</h1>
            </div>
            <div>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#assignLocationModal">
                    <i class="fas fa-map-marker-alt me-1"></i>Asignar Nueva Ubicación
                </button>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!-- Tabla de Historial -->
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Historial de Ubicaciones</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table mb-0">
                        <thead>
                            <tr>
                                <th>Ubicación</th>
                                <th>Desde</th>
                                <th>Hasta</th>
                                <th>Notas</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for entry in history %}
                                <tr data-location-id="{{ entry.location.id }}"
                                    data-lat="{{ entry.location.latitude }}"
                                    data-lng="{{ entry.location.longitude }}"
                                    data-name="{{ entry.location.name }}"
                                    class="location-entry {% if not entry.end_date %}table-primary{% endif %}">
                                    <td>
                                        {{ entry.location.name }}
                                        {% if not entry.end_date %}
                                            <span class="badge bg-primary">Actual</span>
                                        {% endif %}
                                    </td>
                                    <td>{{ entry.start_date.strftime('%d/%m/%Y %H:%M') }}</td>
                                    <td>
                                        {% if entry.end_date %}
                                            {{ entry.end_date.strftime('%d/%m/%Y %H:%M') }}
                                        {% else %}
                                            Presente
                                        {% endif %}
                                    </td>
                                    <td>{{ entry.notes or '-' }}</td>
                                </tr>
                            {% else %}
                                <tr>
                                    <td colspan="4" class="text-center">No hay registros de ubicaciones</td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <a href="{{ url_for('kiosk.detail', kiosk_id=kiosk.id) }}" class="btn btn-outline-primary me-2">
                            <i class="fas fa-eye me-1"></i>Ver Detalles
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Mapa -->
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Mapa de Ubicaciones</h5>
            </div>
            <div class="card-body p-0">
                <div id="map"></div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Asignar Ubicación -->
<div class="modal fade" id="assignLocationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Asignar Nueva Ubicación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="assignLocationForm">
                    <div class="mb-3">
                        <label for="location_id" class="form-label">Ubicación</label>
                        <select class="form-select" id="location_id" name="location_id" required>
                            <option value="">Seleccionar ubicación...</option>
                            {% for location in locations %}
                                <option value="{{ location.id }}">
                                    {{ location.name }} - {{ location.address }}
                                </option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="notes" class="form-label">Notas</label>
                        <textarea class="form-control" id="notes" name="notes" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="saveLocationBtn">Guardar</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script>
$(document).ready(function() {
    // Inicializar mapa
    var map = L.map('map');
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);
    
    var markers = [];
    var bounds = L.latLngBounds();
    
    // Agregar marcadores para cada ubicación
    $('.location-entry').each(function() {
        var lat = parseFloat($(this).data('lat'));
        var lng = parseFloat($(this).data('lng'));
        var name = $(this).data('name');
        
        if (lat && lng) {
            var marker = L.marker([lat, lng])
                .bindPopup(name)
                .addTo(map);
            
            markers.push(marker);
            bounds.extend([lat, lng]);
        }
    });
    
    // Ajustar el mapa para mostrar todos los marcadores
    if (markers.length > 0) {
        map.fitBounds(bounds);
    } else {
        map.setView([0, 0], 2);
    }
    
    // Manejar la asignación de ubicación
    $('#saveLocationBtn').on('click', function() {
        var locationId = $('#location_id').val();
        var notes = $('#notes').val();
        
        if (!locationId) {
            alert('Por favor seleccione una ubicación');
            return;
        }
        
        $.ajax({
            url: '/location/api/assign-kiosk',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                'kiosk_id': {{ kiosk.id }},
                'location_id': parseInt(locationId),
                'notes': notes || ''
            }),
            success: function(response) {
                var alert = $('<div class="alert alert-success alert-dismissible fade show" role="alert">' +
                            'Ubicación asignada exitosamente' +
                            '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                            '</div>');
                $('.container-fluid').prepend(alert);
                
                $('#assignLocationModal').modal('hide');
                setTimeout(function() {
                    window.location.reload();
                }, 1000);
            },
            error: function(xhr) {
                var message = xhr.responseJSON ? xhr.responseJSON.message : 'Error al asignar la ubicación';
                var alert = $('<div class="alert alert-danger alert-dismissible fade show" role="alert">' +
                            message +
                            '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                            '</div>');
                $('.container-fluid').prepend(alert);
            }
        });
    });
});
</script>
{% endblock %} 
        Carpeta: main
            Archivo: _kiosks_list.html
            --- CONTENIDO de _kiosks_list.html ---
<div class="col-xl-8 col-lg-7">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Kiosks Recientes</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Nombre</th>
                            <th>Ubicación</th>
                            <th>Estado</th>
                            <th>Última Conexión</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for kiosk in kiosks[:5] %}
                        <tr>
                            <td>{{ kiosk.name }}</td>
                            <td>{{ kiosk.location.name if kiosk.location else 'Sin ubicación' }}</td>
                            <td>
                                <span class="badge bg-{{ 'success' if kiosk.status == 'online' else 'danger' }}">
                                    {{ kiosk.status }}
                                </span>
                            </td>
                            <td>{{ kiosk.last_connection|datetime }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div> 
            Archivo: _locations_list.html
            --- CONTENIDO de _locations_list.html ---
<div class="col-xl-4 col-lg-5">
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Ubicaciones</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Nombre</th>
                            <th>Kiosks</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for location in locations %}
                        <tr>
                            <td>{{ location.name }}</td>
                            <td>{{ location.kiosks|length }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div> 
            Archivo: index.html
            --- CONTENIDO de index.html ---
{% extends "layouts/base.html" %}

{% block title %}Dashboard{% endblock %}

{% block header_title %}{{ settings.system_name }} - Dashboard{% endblock %}

{% block content %}
<div class="container-fluid">
    <!-- Estadísticas -->
    <div class="row">
        <!-- Total Kiosks -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Total Kiosks</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ stats.total_kiosks }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-desktop fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Kiosks Online -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Kiosks Online</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ stats.online_kiosks }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-signal fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Kiosks Offline -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-danger shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">
                                Kiosks Offline</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ stats.offline_kiosks }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-exclamation-triangle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Total Locations -->
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                Total Ubicaciones</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">{{ stats.total_locations }}</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-map-marker-alt fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Contenido Principal -->
    <div class="row">
        <!-- Lista de Kiosks -->
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold text-primary">Kiosks Recientes</h6>
                    <a href="{{ url_for('kiosks.index') }}" class="btn btn-sm btn-primary">
                        Ver Todos
                    </a>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" width="100%" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>Nombre</th>
                                    <th>Ubicación</th>
                                    <th>Estado</th>
                                    <th>Última Conexión</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for kiosk in kiosks[:5] %}
                                <tr>
                                    <td>{{ kiosk.name }}</td>
                                    <td>{{ kiosk.location.name if kiosk.location else 'Sin ubicación' }}</td>
                                    <td>
                                        <span class="badge bg-{{ 'success' if kiosk.status == 'online' else 'danger' }}">
                                            {{ kiosk.status }}
                                        </span>
                                    </td>
                                    <td>{{ kiosk.last_connection|datetime }}</td>
                                    <td>
                                        <a href="{{ url_for('kiosks.detail', id=kiosk.id) }}" 
                                           class="btn btn-sm btn-outline-primary">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Actividad Reciente -->
        <div class="col-xl-4 col-lg-5">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Actividad Reciente</h6>
                </div>
                <div class="card-body">
                    <div class="list-group list-group-flush">
                        {% for log in recent_logs %}
                        <div class="list-group-item">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">{{ log.kiosk.name if log.kiosk else 'Sistema' }}</h6>
                                <small class="text-muted">{{ log.created_at|datetime }}</small>
                            </div>
                            <p class="mb-1">{{ log.message }}</p>
                            <small class="text-{{ log.event_type }}">
                                {{ log.event_type_display }}
                            </small>
                        </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    // Actualizar dashboard cada X segundos
    const refreshInterval = {{ settings.refresh_interval }} * 1000;
    
    function refreshDashboard() {
        location.reload();
    }
    
    if (refreshInterval > 0) {
        setInterval(refreshDashboard, refreshInterval);
    }
</script>
{% endblock %} 
    Carpeta: utils
        Archivo: exceptions.py
        --- CONTENIDO de exceptions.py ---
from typing import Dict, Optional

class KioskError(Exception):
    """Clase base para excepciones del sistema de kiosks"""
    
    def __init__(self, message: str, error_code: Optional[str] = None, extra_data: Optional[Dict] = None):
        self.message = message
        self.error_code = error_code
        self.extra_data = extra_data or {}
        super().__init__(self.message)

class KioskConnectionError(KioskError):
    """Error de conexión con el kiosk"""
    pass

class KioskCommandError(KioskError):
    """Error al ejecutar un comando en el kiosk"""
    pass

class KioskValidationError(KioskError):
    """Error de validación de datos del kiosk"""
    pass

class WebSocketError(KioskError):
    """Error en la conexión WebSocket"""
    pass

class KioskAuthenticationError(KioskError):
    """Error de autenticación del kiosk"""
    pass

class KioskTimeoutError(KioskError):
    """Error de timeout en operación del kiosk"""
    pass

class KioskStateError(KioskError):
    """Error en el estado del kiosk"""
    pass 
        Archivo: logger.py
        --- CONTENIDO de logger.py ---
import logging
import os
from logging.handlers import RotatingFileHandler
from datetime import datetime

def setup_logger(app):
    """Configura el sistema de logging"""
    if not os.path.exists('logs'):
        os.makedirs('logs')
        
    # Configurar el manejador de archivos
    file_handler = RotatingFileHandler(
        'logs/admin_kiosk.log',
        maxBytes=1024 * 1024,  # 1MB
        backupCount=10,
        delay=True  # No abrir el archivo hasta que sea necesario
    )
    file_handler.setFormatter(logging.Formatter(
        '[%(asctime)s] %(levelname)s in %(module)s: %(message)s'
    ))
    file_handler.setLevel(logging.INFO)
    
    # Limpiar handlers existentes
    app.logger.handlers = []
    
    # Agregar handlers
    app.logger.addHandler(file_handler)
    app.logger.setLevel(logging.INFO)
    
    app.logger.info('Admin Kiosk startup') 
Archivo: config.py
--- CONTENIDO de config.py ---
import os
from datetime import timedelta

class Config:
    # Configuración básica
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-key-12345'
    
    # Base de datos
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'postgresql://postgres:postgres@localhost/admin_kiosk'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    
    # Cache
    CACHE_TYPE = 'SimpleCache'
    CACHE_DEFAULT_TIMEOUT = 300
    
    # Limiter
    RATELIMIT_DEFAULT = "200 per day;50 per hour"
    RATELIMIT_STORAGE_URL = "memory://"
    
    # Mail
    MAIL_SERVER = os.environ.get('MAIL_SERVER', 'smtp.gmail.com')
    MAIL_PORT = int(os.environ.get('MAIL_PORT', '587'))
    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']
    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')
    MAIL_DEFAULT_SENDER = os.environ.get('MAIL_DEFAULT_SENDER', 'noreply@admin-kiosk.com')
    
    # Logging
    LOG_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'logs')
    
    # WebSocket
    SOCK_SERVER_OPTIONS = {'ping_interval': 25} 
Archivo: documentacion_completa_sistema_kiosk.txt
Carpeta: logs
    Archivo: .gitkeep
    Archivo: actions.log
    Archivo: admin_kiosk.log
    Archivo: admin_kiosk_20250106.log
    Archivo: error.log
    Archivo: kiosk.log
    Archivo: system.log
    Archivo: websocket.log
Archivo: mejoras_sistema_kiosk.txt
Carpeta: migrations
    Archivo: alembic.ini
    Archivo: env.py
    --- CONTENIDO de env.py ---
import logging
from logging.config import fileConfig

from flask import current_app

from alembic import context

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)
logger = logging.getLogger('alembic.env')


def get_engine():
    try:
        # this works with Flask-SQLAlchemy<3 and Alchemical
        return current_app.extensions['migrate'].db.get_engine()
    except TypeError:
        # this works with Flask-SQLAlchemy>=3
        return current_app.extensions['migrate'].db.engine


def get_engine_url():
    try:
        return get_engine().url.render_as_string(hide_password=False).replace(
            '%', '%%')
    except AttributeError:
        return str(get_engine().url).replace('%', '%%')


# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
config.set_main_option('sqlalchemy.url', get_engine_url())
target_db = current_app.extensions['migrate'].db

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def get_metadata():
    if hasattr(target_db, 'metadatas'):
        return target_db.metadatas[None]
    return target_db.metadata


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url, target_metadata=get_metadata(), literal_binds=True
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """

    # this callback is used to prevent an auto-migration from being generated
    # when there are no changes to the schema
    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html
    def process_revision_directives(context, revision, directives):
        if getattr(config.cmd_opts, 'autogenerate', False):
            script = directives[0]
            if script.upgrade_ops.is_empty():
                directives[:] = []
                logger.info('No changes in schema detected.')

    connectable = get_engine()

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=get_metadata(),
            process_revision_directives=process_revision_directives,
            **current_app.extensions['migrate'].configure_args
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()

    Archivo: README
    Archivo: script.py.mako
    Carpeta: versions
Archivo: README.md
--- CONTENIDO de README.md ---
# Sistema de Administración de Kiosks
Versión: 3.1.0

## Descripción
Sistema de administración para kiosks que utiliza:
- Arquitectura MVT (Model-View-Template)
- WebSockets para comunicación en tiempo real
- Sistema de logs detallado
- UI responsiva con tarjetas de estado
- Cumplimiento con estándares GLI e ISO

## Características Principales
- **Monitoreo en Tiempo Real**:
  - CPU, RAM, Disco
  - Temperatura y Humedad
  - Estado de Red y UPS
  - Impresora y Periféricos

- **Sistema de Alertas**:
  - Umbrales configurables
  - Notificaciones en tiempo real
  - Logs detallados
  - Auditoría completa

- **Interfaz de Usuario**:
  - Tarjetas de estado en tiempo real
  - Dashboard con métricas
  - Visualización de logs
  - Mapas de ubicación

- **Seguridad**:
  - Autenticación WebSocket
  - Rate limiting
  - Auditoría de acciones
  - Logs inmutables

## Tecnologías
- **Backend**:
  - Flask 3.0.0
  - PostgreSQL
  - WebSockets
  - Flask-SQLAlchemy
  - Flask-Migrate
  
- **Frontend**:
  - Bootstrap
  - jQuery
  - WebSocket client
  - Charts.js

## Requisitos
- Python 3.8+
- PostgreSQL 12+
- Ambiente virtual Python
- Node.js (para algunas dependencias frontend)

## Instalación Rápida

1. Clonar repositorio:
```bash
git clone https://github.com/lmrojas/admin_kiosk.git
cd admin_kiosk
```

2. Crear ambiente virtual:
```bash
python -m venv venv
source venv/bin/activate  # Linux/Mac
# venv\Scripts\activate   # Windows
```

3. Instalar dependencias:
```bash
pip install -r requirements.txt
```

4. Configurar variables de entorno (.env):
```
SECRET_KEY=your-secret-key
DATABASE_URL=postgresql://user:pass@localhost/admin_kiosk
MAIL_USERNAME=lm_test@quattropy.net
MAIL_PASSWORD=a123a_*.*
```

5. Inicializar base de datos:
```bash
flask db init
flask db migrate
flask db upgrade
```

## Estructura del Proyecto
```
admin_kiosk/
├── app/
│   ├── models/            # Modelos (M)
│   ├── views/            # Vistas (V)
│   ├── templates/        # Templates (T)
│   ├── static/          # Archivos estáticos
│   ├── websocket/       # Manejo de WebSocket
│   ├── ai/             # Integración de IA
│   └── __init__.py     # create_app y config
├── migrations/         # Migraciones BD
├── scripts/           # Scripts auxiliares
├── tests/            # Tests unitarios
├── requirements.txt  # Dependencias
└── config.py        # Configuración
```

## Documentación
- [Documentación Completa](docs/documentacion_completa_sistema_kiosk.txt)
- [Mejoras del Sistema](docs/mejoras_sistema_kiosk.txt)

## Contribuir
1. Fork el repositorio
2. Crear rama para feature (`git checkout -b feature/AmazingFeature`)
3. Commit cambios (`git commit -m 'Add some AmazingFeature'`)
4. Push a la rama (`git push origin feature/AmazingFeature`)
5. Abrir Pull Request

## Autor
lmrojas (lmrojasramirez@gmail.com)

## Licencia
Este proyecto está bajo la Licencia MIT - ver el archivo [LICENSE.md](LICENSE.md) para detalles 
Archivo: redis.msi
Archivo: requirements.txt
Archivo: run.py
--- CONTENIDO de run.py ---
from gevent import monkey
monkey.patch_all()

from app import create_app
from app.extensions import socketio

app = create_app()

if __name__ == '__main__':
    socketio.run(app, debug=True) 
Carpeta: scripts
    Archivo: admin_create.py
    --- CONTENIDO de admin_create.py ---
import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from app.models.user import User
from werkzeug.security import generate_password_hash

def create_admin():
    """Crear usuario admin por defecto"""
    app = create_app()
    with app.app_context():
        # Verificar si ya existe el usuario admin
        admin = User.query.filter_by(username='admin').first()
        if admin:
            print('El usuario admin ya existe')
            return
        
        # Crear nuevo usuario admin
        admin = User(
            username='admin',
            password_hash=generate_password_hash('admin123'),
            email='admin@example.com',
            is_admin=True,
            is_active=True
        )
        
        try:
            db.session.add(admin)
            db.session.commit()
            print('Usuario admin creado exitosamente')
        except Exception as e:
            db.session.rollback()
            print(f'Error al crear usuario admin: {str(e)}')

if __name__ == '__main__':
    create_admin() 
    Archivo: clean_db.sql
    Archivo: generate_test_data.py
    --- CONTENIDO de generate_test_data.py ---
import sys
import os
import random
from datetime import datetime, timedelta
from faker import Faker

# Agregar el directorio raíz al path para poder importar la app
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app
from app.extensions import db
from app.models.location import Location
from app.models.kiosk import Kiosk
from app.models.state import State

fake = Faker('es_ES')

def generate_locations():
    """Genera ubicaciones de prueba"""
    # Coordenadas base (Buenos Aires)
    base_lat = -34.6037
    base_lng = -58.3816
    
    locations = []
    for i in range(10):
        # Generar coordenadas cercanas a la base
        lat = base_lat + random.uniform(-0.1, 0.1)
        lng = base_lng + random.uniform(-0.1, 0.1)
        
        location = Location(
            name=f"Sucursal {fake.city()}",
            address=fake.street_address(),
            latitude=lat,
            longitude=lng,
            description=fake.text(max_nb_chars=200)
        )
        db.session.add(location)
    
    db.session.commit()
    return Location.query.all()

def generate_kiosks(locations):
    """Genera kiosks de prueba con ubicaciones asignadas y reales"""
    states = ['online', 'offline', 'maintenance']
    
    for i in range(124):
        # Seleccionar ubicación asignada
        location = random.choice(locations)
        
        # Generar coordenadas reales (con probabilidad de discrepancia)
        if random.random() < 0.2:  # 20% de probabilidad de discrepancia
            # Generar coordenadas significativamente diferentes
            current_lat = location.latitude + random.uniform(-0.01, 0.01)
            current_lng = location.longitude + random.uniform(-0.01, 0.01)
        else:
            # Generar coordenadas muy cercanas (dentro del margen aceptable)
            current_lat = location.latitude + random.uniform(-0.00005, 0.00005)
            current_lng = location.longitude + random.uniform(-0.00005, 0.00005)
        
        # Generar datos de sensores aleatorios
        sensors_data = {
            'cpu_usage': random.uniform(20, 95),
            'ram_usage': random.uniform(30, 98),
            'disk_usage': random.uniform(40, 99),
            'temperature': random.uniform(25, 45),
            'network': {
                'latency': random.uniform(50, 200),
                'bandwidth': random.uniform(10, 100)
            },
            'ups': {
                'status': random.choice(['line', 'battery']),
                'battery_level': random.uniform(20, 100),
                'estimated_runtime': random.randint(10, 120)
            }
        }
        
        # Crear kiosk
        kiosk = Kiosk(
            name=f"Kiosk {i+1:03d}",
            serial_number=f"SN{fake.unique.random_number(digits=8)}",
            status=random.choice(states),
            ip_address=fake.ipv4(),
            location_id=location.id,
            current_latitude=current_lat,
            current_longitude=current_lng,
            last_connection=datetime.utcnow() - timedelta(minutes=random.randint(0, 1440)),
            sensors_data=sensors_data
        )
        
        # Verificar discrepancia de ubicación
        kiosk.check_location_mismatch()
        db.session.add(kiosk)
        
        # Commit cada 10 kiosks para evitar sobrecarga de memoria
        if i % 10 == 0:
            db.session.commit()
    
    # Commit final
    db.session.commit()

def main():
    """Función principal para generar datos de prueba"""
    app = create_app()
    with app.app_context():
        try:
            # Limpiar datos existentes
            print("Limpiando datos existentes...")
            Kiosk.query.delete()
            Location.query.delete()
            db.session.commit()
            
            # Generar y guardar ubicaciones
            print("Generando ubicaciones...")
            locations = generate_locations()
            print(f"- {len(locations)} ubicaciones creadas")
            
            # Generar y guardar kiosks
            print("Generando kiosks...")
            generate_kiosks(locations)
            print(f"- 124 kiosks creados")
            
            print("Datos de prueba generados exitosamente!")
            
        except Exception as e:
            print(f"Error generando datos de prueba: {str(e)}")
            db.session.rollback()
            raise

if __name__ == '__main__':
    main() 
    Archivo: init_db.py
    --- CONTENIDO de init_db.py ---
import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from app.models.state import State
from app.models.action import Action
from app.models.kiosk import Kiosk
from app.models.location import Location, KioskLocation
from datetime import datetime

def init_db():
    """Inicializar la base de datos con datos de prueba"""
    app = create_app()
    with app.app_context():
        # Crear estados por defecto si no existen
        states = [
            {'name': 'Online', 'description': 'Kiosk conectado y funcionando', 'color_class': 'success'},
            {'name': 'Offline', 'description': 'Kiosk desconectado', 'color_class': 'danger'},
            {'name': 'Warning', 'description': 'Kiosk con advertencias', 'color_class': 'warning'},
            {'name': 'Maintenance', 'description': 'Kiosk en mantenimiento', 'color_class': 'info'}
        ]
        
        for state_data in states:
            state = State.query.filter_by(name=state_data['name']).first()
            if not state:
                state = State(**state_data)
                db.session.add(state)
                print(f'Estado creado: {state_data["name"]}')
            else:
                for key, value in state_data.items():
                    setattr(state, key, value)
                print(f'Estado actualizado: {state_data["name"]}')
        
        # Crear o actualizar acciones por defecto
        actions = [
            {
                'name': 'Reiniciar',
                'command': 'restart',
                'description': 'Reiniciar el kiosk',
                'icon_class': 'fas fa-sync',
                'requires_confirmation': True
            },
            {
                'name': 'Actualizar',
                'command': 'update',
                'description': 'Actualizar el software del kiosk',
                'icon_class': 'fas fa-download',
                'requires_confirmation': True
            },
            {
                'name': 'Limpiar Logs',
                'command': 'clean_logs',
                'description': 'Limpiar los logs del kiosk',
                'icon_class': 'fas fa-broom',
                'requires_confirmation': False
            }
        ]
        
        for action_data in actions:
            action = Action.query.filter_by(command=action_data['command']).first()
            if not action:
                action = Action(**action_data)
                db.session.add(action)
                print(f'Acción creada: {action_data["name"]}')
            else:
                for key, value in action_data.items():
                    setattr(action, key, value)
                print(f'Acción actualizada: {action_data["name"]}')
        
        # Crear ubicaciones de prueba si no existen
        locations = [
            {
                'name': 'Sucursal Centro',
                'description': 'Sucursal principal en el centro de la ciudad',
                'address': 'Av. Principal 123, Centro',
                'latitude': -34.603722,
                'longitude': -58.381592
            },
            {
                'name': 'Sucursal Norte',
                'description': 'Sucursal en zona norte',
                'address': 'Calle Norte 456',
                'latitude': -34.583722,
                'longitude': -58.391592
            }
        ]
        
        for location_data in locations:
            location = Location.query.filter_by(name=location_data['name']).first()
            if not location:
                location = Location(**location_data)
                db.session.add(location)
                print(f'Ubicación creada: {location_data["name"]}')
            else:
                for key, value in location_data.items():
                    setattr(location, key, value)
                print(f'Ubicación actualizada: {location_data["name"]}')
        
        # Guardar cambios para tener los IDs
        db.session.commit()
        
        # Crear kiosk de prueba si no existe
        kiosk = Kiosk.query.filter_by(serial_number='SIM001').first()
        if not kiosk:
            kiosk = Kiosk(
                serial_number='SIM001',
                name='Kiosk Simulado',
                location_text='Ubicación de prueba',
                ip_address='192.168.1.100',
                status='offline',
                sensors_data={
                    'temperature': 25.0,
                    'humidity': 50.0,
                    'voltage': 120.0,
                    'cpu_usage': 30.0,
                    'memory_usage': 45.0
                }
            )
            db.session.add(kiosk)
            db.session.commit()
            print(f'Kiosk creado: {kiosk.name}')
            
            # Asignar ubicación inicial
            location = Location.query.first()
            if location:
                kiosk_location = KioskLocation(
                    kiosk_id=kiosk.id,
                    location_id=location.id,
                    notes='Ubicación inicial'
                )
                db.session.add(kiosk_location)
                print(f'Ubicación asignada al kiosk: {location.name}')
        else:
            print(f'Kiosk ya existe: {kiosk.name}')
        
        # Guardar todos los cambios
        db.session.commit()
        print('Base de datos inicializada exitosamente')

if __name__ == '__main__':
    init_db() 
    Archivo: init_states.py
    --- CONTENIDO de init_states.py ---
from app import create_app, db
from app.models.state import State

def init_states():
    """Inicializar estados básicos en la base de datos"""
    app = create_app()
    with app.app_context():
        # Crear estados si no existen
        states = [
            {'id': 1, 'name': 'Normal', 'color': 'success'},
            {'id': 2, 'name': 'Warning', 'color': 'warning'},
            {'id': 3, 'name': 'Crítico', 'color': 'danger'}
        ]
        
        for state_data in states:
            state = State.query.get(state_data['id'])
            if not state:
                state = State(**state_data)
                db.session.add(state)
        
        db.session.commit()
        print("Estados inicializados correctamente")

if __name__ == '__main__':
    init_states() 
    Archivo: init_test_data.py
    --- CONTENIDO de init_test_data.py ---
"""Script para inicializar datos de prueba"""
import sys
import os
from datetime import datetime, UTC

# Agregar el directorio raíz al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app
from app.extensions import db
from app.models import State, Location, Settings

def init_states():
    """Inicializar estados básicos"""
    states = [
        {'name': 'Normal', 'description': 'Funcionamiento normal', 'color_class': 'success'},
        {'name': 'Warning', 'description': 'Advertencias activas', 'color_class': 'warning'},
        {'name': 'Error', 'description': 'Errores críticos', 'color_class': 'danger'},
        {'name': 'Offline', 'description': 'Sin conexión', 'color_class': 'secondary'},
        {'name': 'Maintenance', 'description': 'En mantenimiento', 'color_class': 'info'}
    ]
    
    for state_data in states:
        if not State.query.filter_by(name=state_data['name']).first():
            state = State(**state_data)
            db.session.add(state)
    db.session.commit()
    print("Estados inicializados")

def init_locations():
    """Inicializar ubicaciones de prueba"""
    locations = [
        # Buenos Aires Centro
        {
            'name': 'Shopping Abasto',
            'address': 'Av. Corrientes 3247, CABA',
            'latitude': -34.6037,
            'longitude': -58.3816,
            'description': 'Centro comercial principal'
        },
        {
            'name': 'Terminal Retiro',
            'address': 'Av. Antártida Argentina s/n, CABA',
            'latitude': -34.5891,
            'longitude': -58.3738,
            'description': 'Terminal de buses principal'
        },
        # Córdoba
        {
            'name': 'Patio Olmos',
            'address': 'Av. Vélez Sarsfield 361, Córdoba',
            'latitude': -31.4201,
            'longitude': -64.1888,
            'description': 'Shopping center céntrico'
        },
        # Rosario
        {
            'name': 'Alto Rosario',
            'address': 'Junín 501, Rosario',
            'latitude': -32.9468,
            'longitude': -60.6393,
            'description': 'Centro comercial principal'
        },
        # Mendoza
        {
            'name': 'Mendoza Plaza',
            'address': 'Av. Acceso Este 3280, Guaymallén',
            'latitude': -32.8908,
            'longitude': -68.8272,
            'description': 'Shopping principal de Mendoza'
        }
    ]
    
    for loc_data in locations:
        if not Location.query.filter_by(name=loc_data['name']).first():
            location = Location(**loc_data)
            db.session.add(location)
    db.session.commit()
    print("Ubicaciones inicializadas")

def init_settings():
    """Inicializar configuraciones del sistema"""
    Settings.initialize_defaults()
    print("Configuraciones inicializadas")

def main():
    """Función principal"""
    app = create_app()
    with app.app_context():
        print("Inicializando datos de prueba...")
        init_states()
        init_locations()
        init_settings()
        print("Datos de prueba inicializados correctamente")

if __name__ == '__main__':
    main() 
    Archivo: init_test_kiosk.py
    --- CONTENIDO de init_test_kiosk.py ---
from app import create_app, db
from app.models.kiosk import Kiosk
import argparse
import random

def init_test_kiosks(num_kiosks=1):
    """Inicializar kiosks de prueba"""
    app = create_app()
    with app.app_context():
        kiosks_creados = 0
        for i in range(num_kiosks):
            serial = f'TEST{(i+1):03d}'
            # Verificar si ya existe el kiosk
            kiosk = Kiosk.query.filter_by(serial_number=serial).first()
            if not kiosk:
                # Generar IP aleatoria en el rango 192.168.1.x
                ip = f'192.168.1.{random.randint(100, 200)}'
                kiosk = Kiosk(
                    serial_number=serial,
                    name=f'Kiosk de Prueba {i+1}',
                    location_text=f'Ubicación de Prueba {i+1}',
                    ip_address=ip,
                    status='offline',
                    state_id=1  # Estado normal
                )
                db.session.add(kiosk)
                kiosks_creados += 1
        
        if kiosks_creados > 0:
            db.session.commit()
            print(f"{kiosks_creados} kiosks de prueba creados exitosamente")
        else:
            print("No se crearon nuevos kiosks (ya existían)")

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--num_kiosks', type=int, default=1, help='Número de kiosks a crear')
    args = parser.parse_args()
    init_test_kiosks(args.num_kiosks) 
    Archivo: kiosk_simulator.py
    --- CONTENIDO de kiosk_simulator.py ---
import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import socketio
import time
import random
import json
from datetime import datetime
from app import create_app, db
from app.models.kiosk import Kiosk
from app.models.kiosk_log import KioskLog

# Crear cliente SocketIO
sio = socketio.Client()

# Configuración del kiosk simulado
KIOSK_DATA = {
    'id': 1,  # ID del kiosk a simular
    'serial_number': 'SIM001',
    'name': 'Kiosk Simulado',
    'status': 'online',
    'sensors_data': {
        'temperature': 25.0,
        'humidity': 50.0,
        'voltage': 120.0,
        'cpu_usage': 30.0,
        'memory_usage': 45.0
    }
}

@sio.event
def connect():
    print('Conectado al servidor WebSocket')
    # Enviar estado inicial
    send_kiosk_data()

@sio.event
def disconnect():
    print('Desconectado del servidor WebSocket')

def generate_sensor_data():
    """Generar datos aleatorios para los sensores"""
    return {
        'temperature': round(random.uniform(20.0, 30.0), 1),
        'humidity': round(random.uniform(40.0, 60.0), 1),
        'voltage': round(random.uniform(115.0, 125.0), 1),
        'cpu_usage': round(random.uniform(20.0, 80.0), 1),
        'memory_usage': round(random.uniform(30.0, 70.0), 1)
    }

def send_kiosk_data():
    """Enviar datos del kiosk al servidor"""
    KIOSK_DATA['sensors_data'] = generate_sensor_data()
    KIOSK_DATA['last_connection'] = datetime.utcnow().isoformat()
    
    try:
        # Actualizar datos en la base de datos
        app = create_app()
        with app.app_context():
            kiosk = Kiosk.query.get(KIOSK_DATA['id'])
            if kiosk:
                kiosk.status = 'online'
                kiosk.last_connection = datetime.utcnow()
                kiosk.update_sensor_data(KIOSK_DATA['sensors_data'])
                
                # Registrar log
                KioskLog.log_event(
                    kiosk_id=kiosk.id,
                    event_type='info',
                    message='Actualización de datos de sensores',
                    details=KIOSK_DATA['sensors_data']
                )
                
                db.session.commit()
        
        # Enviar datos vía WebSocket
        sio.emit('kiosk_update', {
            'kiosk_id': KIOSK_DATA['id'],
            'data': KIOSK_DATA
        })
        print(f'Datos enviados: {json.dumps(KIOSK_DATA["sensors_data"], indent=2)}')
    except Exception as e:
        print(f'Error al enviar datos: {str(e)}')

def main():
    try:
        # Conectar al servidor WebSocket
        sio.connect('http://localhost:5000')
        
        # Bucle principal
        while True:
            send_kiosk_data()
            time.sleep(5)  # Esperar 5 segundos entre actualizaciones
            
    except KeyboardInterrupt:
        print('\nDeteniendo simulador...')
        # Marcar kiosk como offline antes de salir
        app = create_app()
        with app.app_context():
            kiosk = Kiosk.query.get(KIOSK_DATA['id'])
            if kiosk:
                kiosk.status = 'offline'
                db.session.commit()
        
        sio.disconnect()
    except Exception as e:
        print(f'Error: {str(e)}')
        if sio.connected:
            sio.disconnect()

if __name__ == '__main__':
    main() 
    Archivo: setup_project_structure.py
    --- CONTENIDO de setup_project_structure.py ---
# coding: utf-8
"""
export_custom_mvt_structure.py

Este script recorre tu proyecto en D:\Programas_D\admin_kiosk
y genera uno o varios .txt con la estructura de carpetas/archivos,
incrustando SOLO el contenido de archivos que tú has escrito:
(.py, .html, .css, .js, .jsc, .json, .md).

Excluye carpetas de sistema (ej. .git, __pycache__, etc.) y 
archivos sin extensión relevante (p. ej. .pyc, .exe, .dll, etc.).

USO:
  cd D:\Programas_D\admin_kiosk
  python scripts\export_custom_mvt_structure.py

Luego verás uno o varios .txt (project_custom_structure.txt, numerados si excede CHAR_LIMIT).
¡Listo!
"""

import os
import datetime
# CONFIGURACIONES
# Ruta raíz donde se encuentra el proyecto
ROOT_DIR = r"D:\Programas_D\admin_kiosk"

# Límite máximo de caracteres por archivo de salida
CHAR_LIMIT = 30000000

# Extensiones "tuyas" para las que incrustaremos el contenido (ajusta a tus necesidades)
YOUR_EXTENSIONS = (".py", ".html", ".css", ".js", ".jsc", ".json", ".md")

# Carpetas de sistema a excluir
EXCLUDED_DIRS = {".git", "__pycache__", "venv", "env", ".svn", ".hg"}

# Archivos de sistema a ignorar (extensiones o patrones)
EXCLUDED_FILE_EXT = {".pyc", ".exe", ".dll", ".so", ".pyd"}

# Nombre base para el/los archivo(s) de salida
OUTPUT_BASENAME = "project_custom_structure"

def main():
    now_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    header = (
        f"=== PROYECTO MVT PERSONALIZADO: {os.path.basename(ROOT_DIR)} ===\n"
        f"Fecha de creación del archivo: {now_str}\n\n"
        f"Carpeta raíz analizada: {ROOT_DIR}\n\n"
        "Incluimos SOLO el contenido de archivos con extensiones:\n"
        f"  {YOUR_EXTENSIONS}\n\n"
        "Excluimos carpetas de sistema:\n"
        f"  {EXCLUDED_DIRS}\n"
        "Excluimos archivos con extensiones:\n"
        f"  {EXCLUDED_FILE_EXT}\n\n"
        "Estructura y contenido de archivos relevantes:\n"
        "----------------------------------------------\n\n"
    )

    # Acumulamos todo el texto aquí
    all_text_parts = [header]

    def build_structure_tree(current_path, indent=""):
        """Recorre recursivamente la carpeta actual, listando subcarpetas/archivos.
           Incrusta contenido de los archivos con extensiones en YOUR_EXTENSIONS."""
        # Obtenemos el listado ordenado (alfabético) para consistencia
        try:
            entries = sorted(os.listdir(current_path), key=str.lower)
        except PermissionError:
            all_text_parts.append(f"{indent}[Sin permisos para acceder a {current_path}]\n")
            return

        for entry in entries:
            entry_path = os.path.join(current_path, entry)

            # Si es carpeta, verificamos si está excluida
            if os.path.isdir(entry_path):
                if entry in EXCLUDED_DIRS:
                    # No entramos a carpetas excluidas
                    continue
                # Mostramos carpeta
                all_text_parts.append(f"{indent}Carpeta: {entry}\n")
                # Recursemos dentro (indentación adicional)
                build_structure_tree(entry_path, indent + "    ")
            else:
                # Es archivo
                # Revisamos extensión
                _, ext = os.path.splitext(entry)
                ext = ext.lower()

                if ext in EXCLUDED_FILE_EXT:
                    # Es un archivo de sistema (ej. .pyc), lo omitimos
                    continue

                all_text_parts.append(f"{indent}Archivo: {entry}\n")

                # Si es extensión que consideramos "nuestra", incrustamos contenido
                if ext in YOUR_EXTENSIONS:
                    try:
                        with open(entry_path, "r", encoding="utf-8", errors="replace") as f:
                            file_data = f.read()
                        all_text_parts.append(f"{indent}--- CONTENIDO de {entry} ---\n")
                        # No se va a indentar el código para no distorsionarlo;
                        # si prefieres, podrías añadir "indent" aquí.
                        all_text_parts.append(file_data + "\n")
                    except Exception as e:
                        all_text_parts.append(f"{indent}[No se pudo leer {entry}: {e}]\n")

    # Iniciamos la construcción de la estructura desde la carpeta raíz
    build_structure_tree(ROOT_DIR)

    # Unimos todo en un solo string
    final_text = "".join(all_text_parts)

    # Partimos en trozos si excede CHAR_LIMIT
    total_len = len(final_text)
    num_chunks = (total_len + CHAR_LIMIT - 1) // CHAR_LIMIT

    start_idx = 0
    for i in range(num_chunks):
        end_idx = min(start_idx + CHAR_LIMIT, total_len)
        chunk_text = final_text[start_idx:end_idx]

        # Definimos el nombre de archivo
        if num_chunks == 1:
            out_filename = f"{OUTPUT_BASENAME}.txt"
        else:
            out_filename = f"{OUTPUT_BASENAME}_{i+1}.txt"

        with open(out_filename, "w", encoding="utf-8") as out_f:
            out_f.write(chunk_text)

        print(f"Se ha creado '{out_filename}' (caracteres {start_idx+1} a {end_idx} de {total_len}).")

        start_idx = end_idx

    print("\n¡Exportación completada! Revisa tus archivos .txt.")

if __name__ == "__main__":
    main()

    Archivo: simulate_kiosks.py
    --- CONTENIDO de simulate_kiosks.py ---
"""Script para simular kioscos con diferentes comportamientos"""
import sys
import os
import random
import time
import socketio
import json
from datetime import datetime, timedelta, UTC
from threading import Thread, Event

# Agregar el directorio raíz al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app
from app.extensions import db
from app.models import Kiosk, Location, KioskLog, State

# Configuración de comportamientos
BEHAVIORS = {
    'normal': {
        'probability': 0.6,  # 60% de los kiosks
        'cpu_range': (20, 60),
        'ram_range': (30, 70),
        'disk_range': (40, 75),
        'temp_range': (25, 32),
        'error_prob': 0.05,
        'warning_prob': 0.1,
        'offline_prob': 0.02,
        'location_mismatch_prob': 0.01
    },
    'stressed': {
        'probability': 0.3,  # 30% de los kiosks
        'cpu_range': (75, 95),
        'ram_range': (80, 95),
        'disk_range': (85, 95),
        'temp_range': (35, 42),
        'error_prob': 0.2,
        'warning_prob': 0.4,
        'offline_prob': 0.1,
        'location_mismatch_prob': 0.05
    },
    'problematic': {
        'probability': 0.1,  # 10% de los kiosks
        'cpu_range': (90, 100),
        'ram_range': (90, 100),
        'disk_range': (95, 100),
        'temp_range': (40, 48),
        'error_prob': 0.4,
        'warning_prob': 0.6,
        'offline_prob': 0.3,
        'location_mismatch_prob': 0.2
    }
}

class KioskSimulator:
    """Clase para simular el comportamiento de un kiosk"""
    
    def __init__(self, kiosk_id, behavior_type):
        self.kiosk_id = kiosk_id
        self.behavior = BEHAVIORS[behavior_type]
        self.sio = socketio.Client()
        self.connected = False
        self.stop_event = Event()
        self.last_location_check = datetime.now()
        
        # Configurar eventos de Socket.IO
        self.setup_socketio_events()
    
    def setup_socketio_events(self):
        """Configurar eventos de Socket.IO"""
        @self.sio.event
        def connect():
            print(f'Kiosk {self.kiosk_id} conectado')
            self.connected = True
            self.join_kiosk_room()
        
        @self.sio.event
        def disconnect():
            print(f'Kiosk {self.kiosk_id} desconectado')
            self.connected = False
        
        @self.sio.event
        def execute_action(data):
            print(f'Kiosk {self.kiosk_id} recibió acción: {data}')
            # Simular ejecución de acción
            time.sleep(random.uniform(0.5, 2.0))
            self.sio.emit('action_completed', {
                'kiosk_id': self.kiosk_id,
                'action_id': data['action_id'],
                'status': 'success'
            })
    
    def join_kiosk_room(self):
        """Unirse a la sala específica del kiosk"""
        self.sio.emit('join', {'kiosk_id': self.kiosk_id})
    
    def generate_sensor_data(self):
        """Generar datos simulados de sensores"""
        return {
            'cpu_usage': random.uniform(*self.behavior['cpu_range']),
            'ram_usage': random.uniform(*self.behavior['ram_range']),
            'disk_usage': random.uniform(*self.behavior['disk_range']),
            'temperature': random.uniform(*self.behavior['temp_range']),
            'network': {
                'latency': random.uniform(50, 200),
                'download_speed': random.uniform(1, 100),
                'upload_speed': random.uniform(1, 50),
                'signal_strength': random.uniform(-70, -30)
            },
            'ups': {
                'status': random.choice(['online', 'battery', 'bypass']),
                'battery_level': random.uniform(20, 100),
                'estimated_runtime': random.randint(10, 120)
            }
        }
    
    def check_location_mismatch(self, app):
        """Verificar y actualizar discrepancia de ubicación"""
        if (datetime.now() - self.last_location_check).seconds > 300:  # Cada 5 minutos
            with app.app_context():
                kiosk = Kiosk.query.get(self.kiosk_id)
                if kiosk and random.random() < self.behavior['location_mismatch_prob']:
                    # Simular movimiento del kiosk
                    kiosk.current_latitude = kiosk.location.latitude + random.uniform(-0.01, 0.01)
                    kiosk.current_longitude = kiosk.location.longitude + random.uniform(-0.01, 0.01)
                    kiosk.location_mismatch = True
                    
                    # Registrar el evento
                    KioskLog.create_log(
                        kiosk_id=kiosk.id,
                        event_type='location',
                        message='Discrepancia de ubicación detectada',
                        details={
                            'current_location': {
                                'lat': kiosk.current_latitude,
                                'lng': kiosk.current_longitude
                            },
                            'assigned_location': {
                                'lat': kiosk.location.latitude,
                                'lng': kiosk.location.longitude
                            }
                        }
                    )
                    db.session.commit()
            self.last_location_check = datetime.now()
    
    def run(self, app):
        """Ejecutar el simulador"""
        while not self.stop_event.is_set():
            try:
                if not self.connected:
                    try:
                        self.sio.connect('http://localhost:5000')
                    except Exception as e:
                        print(f'Error conectando kiosk {self.kiosk_id}: {str(e)}')
                        time.sleep(5)
                        continue
                
                # Simular comportamiento offline
                if random.random() < self.behavior['offline_prob']:
                    if self.connected:
                        self.sio.disconnect()
                    time.sleep(random.uniform(5, 15))
                    continue
                
                # Generar y enviar datos
                with app.app_context():
                    kiosk = Kiosk.query.get(self.kiosk_id)
                    if kiosk:
                        # Actualizar estado y datos
                        sensors_data = self.generate_sensor_data()
                        kiosk.last_connection = datetime.now(UTC)
                        kiosk.sensors_data = sensors_data
                        
                        # Verificar ubicación
                        self.check_location_mismatch(app)
                        
                        # Enviar actualización por WebSocket
                        if self.connected:
                            self.sio.emit('kiosk_update', {
                                'kiosk_id': self.kiosk_id,
                                'data': {
                                    'status': 'online',
                                    'sensors_data': sensors_data,
                                    'last_connection': kiosk.last_connection.isoformat()
                                }
                            })
                        
                        db.session.commit()
                
                # Esperar antes de la siguiente actualización
                time.sleep(random.uniform(1, 3))
                
            except Exception as e:
                print(f'Error en kiosk {self.kiosk_id}: {str(e)}')
                time.sleep(5)
    
    def stop(self):
        """Detener el simulador"""
        self.stop_event.set()
        if self.connected:
            self.sio.disconnect()

def create_test_kiosks(num_kiosks=10):
    """Crear kiosks de prueba"""
    app = create_app()
    with app.app_context():
        locations = Location.query.all()
        normal_state = State.query.filter_by(name='Normal').first()
        
        for i in range(num_kiosks):
            # Asignar comportamiento basado en probabilidades
            rand = random.random()
            if rand < BEHAVIORS['normal']['probability']:
                behavior = 'normal'
            elif rand < BEHAVIORS['normal']['probability'] + BEHAVIORS['stressed']['probability']:
                behavior = 'stressed'
            else:
                behavior = 'problematic'
            
            # Crear kiosk
            location = random.choice(locations)
            kiosk = Kiosk(
                name=f'Kiosk Test {i+1:03d}',
                serial_number=f'SN{random.randint(10000000, 99999999)}',
                status='offline',
                location=location,
                current_latitude=location.latitude,
                current_longitude=location.longitude,
                state=normal_state,
                ip_address=f'192.168.1.{random.randint(2, 254)}'
            )
            db.session.add(kiosk)
        
        db.session.commit()
        return [(k.id, 'normal' if random.random() < 0.6 else 'stressed' if random.random() < 0.8 else 'problematic') 
                for k in Kiosk.query.all()]

def main():
    """Función principal"""
    # Crear kiosks de prueba
    kiosk_configs = create_test_kiosks(10)
    
    # Crear y ejecutar simuladores
    simulators = []
    app = create_app()
    
    try:
        # Iniciar simuladores
        for kiosk_id, behavior in kiosk_configs:
            simulator = KioskSimulator(kiosk_id, behavior)
            thread = Thread(target=simulator.run, args=(app,))
            thread.daemon = True
            thread.start()
            simulators.append((simulator, thread))
            print(f'Iniciado simulador para Kiosk {kiosk_id} con comportamiento {behavior}')
        
        # Mantener el script corriendo
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        print("\nDeteniendo simuladores...")
        for simulator, _ in simulators:
            simulator.stop()
        
        print("Simulación finalizada")

if __name__ == '__main__':
    main() 
    Archivo: test_sensors.py
    --- CONTENIDO de test_sensors.py ---
from app import create_app, db
from app.models.kiosk import Kiosk
import random
import time
from datetime import datetime

def generate_sensor_data():
    """Generar datos aleatorios de sensores"""
    return {
        'cpu_usage': random.uniform(50, 95),
        'ram_usage': random.uniform(60, 98),
        'disk_usage': random.uniform(70, 98),
        'temperature': random.uniform(30, 45),
        'humidity': random.uniform(40, 80),
        'network': {
            'latency': random.randint(5, 200),
            'download_speed': random.uniform(1, 100),
            'upload_speed': random.uniform(1, 50),
            'signal_strength': random.uniform(20, 100)
        },
        'ups': {
            'status': random.choice(['online', 'battery', 'bypass']),
            'battery_level': random.uniform(5, 100),
            'estimated_runtime': random.randint(5, 120)
        },
        'errors': [],
        'warnings': []
    }

def test_sensors():
    """Probar actualización de sensores"""
    app = create_app()
    with app.app_context():
        # Obtener todos los kiosks
        kiosks = Kiosk.query.all()
        if not kiosks:
            print("No hay kiosks en la base de datos")
            return
        
        print(f"Iniciando simulación con {len(kiosks)} kiosks")
        try:
            while True:
                for kiosk in kiosks:
                    # Generar datos aleatorios
                    data = generate_sensor_data()
                    
                    # Agregar algunos errores y advertencias aleatorias
                    if random.random() < 0.2:  # 20% de probabilidad
                        data['errors'].append(random.choice([
                            'Error de conexión con impresora',
                            'Error de lectura en disco',
                            'Fallo en ventilador'
                        ]))
                    
                    if random.random() < 0.3:  # 30% de probabilidad
                        data['warnings'].append(random.choice([
                            'Papel bajo en impresora',
                            'Actualización pendiente',
                            'Rendimiento degradado'
                        ]))
                    
                    # Actualizar estado online/offline
                    kiosk.status = 'online' if random.random() > 0.1 else 'offline'
                    
                    # Actualizar datos de sensores
                    kiosk.update_sensor_data(data)
                    print(f"Kiosk {kiosk.name} actualizado - {datetime.now()}")
                
                # Esperar 5 segundos antes de la siguiente actualización
                time.sleep(5)
                
        except KeyboardInterrupt:
            print("\nSimulación detenida por el usuario")

if __name__ == '__main__':
    test_sensors() 
Archivo: wsgi.py
--- CONTENIDO de wsgi.py ---
from app import create_app

app = create_app() 
